@using Microsoft.AspNetCore.SignalR.Client
@using BurnIn.Shared.Models.BurnInStationData
@using BurnIn.Shared.Hubs
@using BurnIn.Shared.Controller
@inject NavigationManager NavManager
@implements IAsyncDisposable
@rendermode InteractiveServer

<div class="row w-100">
    <RadzenButton Text="Connect" IsBusy=@busy Click=@this.ConnectHandler/>
</div>

<div class="row">
    <div class="col">
        <RadzenButton Text="Toggle Current" 
                      Disabled=@(!this._isConnected) 
                      IsBusy=@this.busy 
                      Click=@this.ToggleHeater/>
    </div>
    
</div>
<div class="row">
    <span></span>
    <div class=@this.GetCss(this._reading.running)>
        <h4 class="py-1">@this.GetLabel(this._reading.running)</h4>
    </div>
</div>

<div class="rz-p-12 rz-text-align-center">
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.t1 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.t2 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.t3 />
</div>
<div class="rz-p-12 rz-text-align-center">
    <RadzenNumeric TValue="double" @bind-Value=@this._reading.v11 />
    <RadzenNumeric TValue="double" @bind-Value=@this._reading.v12 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.v21 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.v22 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.v31 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.v32 />
</div>
<div class="rz-p-12 rz-text-align-center">
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.i11 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.i12 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.i21 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.i22 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.i31 />
    <RadzenNumeric TValue="double" Format="#.0000" @bind-Value=@this._reading.i32 />
</div>
<div class="row">
    <EventConsole @ref=@this._console />
</div>


@code {
    EventConsole _console;
    string? _com = "";
    bool busy = false;
    bool _isConnected = false;
    HubConnection? _connection;
    RawReading? _reading=new RawReading();

    bool Connected => this._connection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync() {
        this._connection = new HubConnectionBuilder()
            .WithUrl(HubConstants.HubAddress)
            .Build();
        this._connection.On<RawReading>(HubConstants.Events.OnSerialCom, this.OnSerialCom);
        this._connection.On<string>(HubConstants.Events.OnExecuteCommand, this.OnSerialComMessage);
        try {
            await this._connection.StartAsync();
            this._com += "Connected\n";
            Console.WriteLine("Hub Connected");
        } catch {
            Console.WriteLine("Hub Connection Failed");
        }
    }

    private async Task OnSerialCom(RawReading reading) {
        this._reading = reading;
        await InvokeAsync(StateHasChanged);
    }

    private Task OnSerialComMessage(string msg) {
        this._console.Log(msg);
        return Task.CompletedTask;
    }

    async Task ConnectHandler() {
        this.busy = true;
        this._isConnected = true;
        var result = await this._connection.InvokeAsync<ControllerResult>(HubConstants.Methods.ConnectUsb);
        string msg = result.Success ? "Usb Connected" : "Usb Connection Error";
        this._console.Log(msg);
        this.busy = false;
        await InvokeAsync(StateHasChanged);
        
    }

    async Task ToggleHeater() {
        var result = await this._connection.InvokeAsync<ControllerResult>("ToggleHeater");
        string msg = result.Message ?? "ToggleHeater Message Null";
        this._console.Log(result.Message);
    }
    
    private string GetCss(bool running) {
        return running ? "bg-success text-white text-center" : "bg-danger text-dark text-center";
    }

    private string GetLabel(bool running) {
        return running ? "Running" : "Not Running";
    }
    
    public async ValueTask DisposeAsync() {
        if (this.Connected) {
            await this._connection.DisposeAsync();
        }
    }
}