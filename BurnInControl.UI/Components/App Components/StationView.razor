@using BurnInControl.UI.Components.App_Components.Displays
@using BurnInControl.UI.Components.App_Components.Forms
@using BurnInControl.UI.Components.App_Components.Util
@using BurnInControl.UI.Components.App_Components.Controls
@using BurnInControl.Data.StationModel.Components
@using BurnInControl.Shared.ComDefinitions
@using BurnInControl.Shared.ComDefinitions.Station
@using BurnInControl.Shared.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@inject ILogger<StationView> _logger
@implements IAsyncDisposable


<RadzenSplitter Orientation="Orientation.Horizontal">
    <RadzenSplitterPane Size="15%" Collapsed="@this._runtimePaneCollapsed">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="10" Style="margin: 10px">
            <RuntimeDisplay DisplayText="Runtime" TextStyle="TextStyle.H4" State="true" DisplayValue="06:07:53" LabelFontSize="12" />
            <ProbeRuntimes />
        </RadzenStack>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="70%" Collapsible="false">
        <RadzenSplitter Orientation="Orientation.Vertical" style=" border: 1px solid rgba(0,0,0,.08);">
            <RadzenSplitterPane Size="75%" Collapsible="false">
                <RadzenSplitter>
                        <RadzenTabs RenderMode="TabRenderMode.Client" SelectedIndexChanged="SelectedTabChangedHandler" Style="width: 100%; height: 100%">
                            <Tabs>
                                <RadzenTabsItem Text="Display" Selected="true">
                                    <StationDisplays/>
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Test Setup">
                                    <TestSetup></TestSetup>
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>
                </RadzenSplitter>
            </RadzenSplitterPane>
            <RadzenSplitterPane Size="25%" Resizable="true" Collapsed="this._eventPaneCollapsed" >
                <RadzenSplitter>
                    <RadzenSplitterPane>
                        <EventConsole @ref="@this._eventConsole" LogTitle="Station Log"/>
                    </RadzenSplitterPane>
                </RadzenSplitter>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="15%" Resizable="true" Collapsed="@this._controlPaneCollapsed">
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <StationControl OnConnect="@this.OnConnectClicked"
                            OnReset="@this.OnResetClicked"
                            OnStart="@this.OnStartClicked"
                            OnCurrentChanged="CurrentChangedHandler"
                            OnTempChanged="TempChangedHandler"/>
        </RadzenRow>
    </RadzenSplitterPane>
</RadzenSplitter>

@code {
   private EventConsole _eventConsole=new EventConsole();
   private StationSerialData? _data;
   private HubConnection? _hubConnection;
   
   private bool _eventPaneCollapsed = false;
   private bool _controlPaneCollapsed = false;
   private bool _runtimePaneCollapsed = false;

   protected override async Task OnInitializedAsync() {
       var hubAddress=Environment.GetEnvironmentVariable("StationHub");
       string addr=string.IsNullOrEmpty(hubAddress) ? HubConstants.HubAddress:hubAddress;

       this._hubConnection = new HubConnectionBuilder()
           .WithUrl(addr)
           .Build();

       this._hubConnection.On<StationSerialData>(HubConstants.Events.OnSerialCom,this.OnSerialComReceived);
       this._hubConnection.On<string>(HubConstants.Events.OnSerialComMessage, this.OnSerialComMessageReceived);
       this._hubConnection.On<string>(HubConstants.Events.OnTestStartedFailed, this.OnSerialComMessageReceived);
       try {
           await this._hubConnection.StartAsync();
           this._logger.LogInformation("Hub Connection Established");
           this._eventConsole.Log("Hub Connection Established",AlertStyle.Success);
       } catch(Exception e) {
           string error = e.Message;
           if (e.InnerException != null) {
               error+="\n"+e.InnerException.Message;
           }
           this._logger.LogError($"Hub Connection Failed, Exception: \n {error}");
           this._eventConsole.Log("Hub Connection Failed",AlertStyle.Danger);
       }
   }
   
   private void OnSerialComReceived(StationSerialData data) {
       this._data = data;
       InvokeAsync(StateHasChanged);
   }

   private void OnSerialComMessageReceived(string message) {
       this._eventConsole.Log(message,AlertStyle.Base);
   }
   
   private async Task ResetHandler() {
       await this._hubConnection.InvokeAsync(HubConstants.Methods.SendCommand, StationCommand.Reset);
   }

   
   private async Task OnStartClicked() {
       this._eventConsole.Log("Start Clicked",AlertStyle.Info);
       await this._hubConnection.InvokeAsync(HubConstants.Methods.SendCommand, StationCommand.Start);
   }
   
   private async Task OnResetClicked() {
       this._eventConsole.Log("Reset Clicked",AlertStyle.Warning);
   }
   
   private async Task OnConnectClicked() {
       this._eventConsole.Log("Connect Clicked",AlertStyle.Danger);
   }
   private void SelectedTabChangedHandler(int obj) {
       if (obj != 0) {
           this._controlPaneCollapsed = true;
           this._runtimePaneCollapsed = true;
       } else {
           this._controlPaneCollapsed = false;
           this._runtimePaneCollapsed = false;
       }
       this._eventConsole.Log($"Tab Changed {obj}",AlertStyle.Info);
   }
   private async Task CurrentChangedHandler(StationCurrent stationCurrent) {
       this._eventConsole.Log($"Current Selection Changed.  Value {stationCurrent.Name}",AlertStyle.Danger);
   }
   private async Task TempChangedHandler(double temp) {
       this._eventConsole.Log($"Temp Value Changed.  Value {temp}",AlertStyle.Base);
   }
   public ValueTask DisposeAsync() {
       if(this._hubConnection!=null) {
           return this._hubConnection.DisposeAsync();
       }
         return ValueTask.CompletedTask;
   }
} 

