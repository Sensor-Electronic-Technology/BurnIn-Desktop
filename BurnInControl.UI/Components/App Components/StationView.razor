@using BurnInControl.UI.Components.App_Components.Displays
@using BurnInControl.UI.Components.App_Components.Forms
@using BurnInControl.UI.Components.App_Components.Controls.WaferMap
@using BurnInControl.Data.StationModel.Components
@using BurnInControl.Shared.ComDefinitions
@using BurnInControl.Shared.ComDefinitions.Station
@using BurnInControl.HubDefinitions.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@using BurnInControl.Data.BurnInTests.Wafers
@using BurnInControl.HubDefinitions.HubTransports
@using BurnInControl.UI.Components.App_Components.Dialogs
@using Environment = System.Environment
@inject ILogger<StationView> _logger
@inject StationHubConnection StationHubConnection
@inject NotificationService NotificationService
@inject DialogService DialogService
@implements IAsyncDisposable
@rendermode InteractiveServer

<RadzenSplitter Orientation="Orientation.Horizontal">
    <RadzenSplitterPane Size="15%" Collapsed="@this._runtimePaneCollapsed">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="10" Style="margin: 10px">
            <TempCurrentToggle CurrentSetPoint="@this._data.CurrentSetPoint"
                               TemperatureSetPoint="@this._data.TemperatureSetPoint"
                               CurrentCycle="@this.CycleCurrentHandler"
                               TemperatureToggle="@this.ToggleTemperatureHandler"
                               Disabled="@(!this.Connected)"/>
            <ElapsedView Elapsed="@this._data.ElapsedSeconds" 
                         ProbeRuntimes="@this._data.ProbeRuntimes"/>
        </RadzenStack>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="70%" Collapsible="false">
        <RadzenSplitter Orientation="Orientation.Vertical" style=" border: 1px solid rgba(0,0,0,.08);">
            <RadzenSplitterPane Size="75%" Collapsible="false">
                <RadzenSplitter>
                    <RadzenTabs RenderMode="TabRenderMode.Client" 
                                SelectedIndexChanged="SelectedTabChangedHandler" Style="width: 100%; height: 100%">
                            <Tabs>
                                <RadzenTabsItem Text="Live" Selected="true">
                                    <StationDisplays Voltages="@this._data.Voltages" 
                                                     Currents="@this._data.Currents" 
                                                     Temps="@this._data.Temperatures"
                                                     TempStates="@this._data.HeaterStates"/>
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Test Setup">
                                    <TestSetup Save="SaveClickedHandler"/>
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Plots">
                                    @*<TwoInchWaferMapView></TwoInchWaferMapView>*@
                                    <div class="rz-p-12 rz-text-align-center">
                                        <RadzenButton Text="Open Selector" ButtonStyle="ButtonStyle.Secondary" Click=@OpenSelector />
                                    </div>
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>
                </RadzenSplitter>
            </RadzenSplitterPane>
            <RadzenSplitterPane Size="25%" 
                                Resizable="true" 
                                Collapsed="@this._eventPaneCollapsed" >
                <RadzenSplitter>
                    <RadzenSplitterPane>
                        <EventConsole @ref="@this._eventConsole" 
                                      LogTitle="Station Log"/>
                    </RadzenSplitterPane>
                </RadzenSplitter>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="15%" Resizable="true" Collapsed="@this._controlPaneCollapsed">
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <StationControl Connect="@this.OnConnectClicked"
                            Reset="@this.OnResetClicked"
                            StartPause="@this.OnStartClicked"
                            CurrentChanged="CurrentChangedHandler"
                            UsbConnect="@this.OnUsbConnectClicked"
                            TempChanged="TempChangedHandler"
                            ServiceConnected="@this.Connected"
                            UsbConnected="@this._usbConnected"
                            Paused="@this._data.Paused"/>
        </RadzenRow>
    </RadzenSplitterPane>
</RadzenSplitter>

@code {
   private EventConsole _eventConsole=new EventConsole();
   private StationSerialData _data=new();
   private HubConnection? _hubConnection;
   private bool Connected=>this._hubConnection?.State==HubConnectionState.Connected;
   private bool _usbConnected=false;
   private List<WaferSetup>? _waferSetups = new List<WaferSetup>();
   private bool _eventPaneCollapsed = false;
   private bool _controlPaneCollapsed = false;
   private bool _runtimePaneCollapsed = false;

   protected override async Task OnInitializedAsync() {
        var hubAddress=Environment.GetEnvironmentVariable("StationHub");
        //string addr=string.IsNullOrEmpty(hubAddress) ? HubConstants.HubAddress:hubAddress;
        string addr = "http://localhost:5066/hubs/station";
       /*this._hubConnection = new HubConnectionBuilder()
            .WithUrl(addr)
            .Build();*/
        /*this._hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5066/hubs/station")
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.Zero, 
                                            TimeSpan.FromSeconds(10),TimeSpan.FromSeconds(30),
                                            TimeSpan.FromSeconds(60) })
            .Build();*/
        this._hubConnection = new HubConnectionBuilder()
            .WithUrl(addr)
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.Zero, 
                TimeSpan.FromSeconds(10),TimeSpan.FromSeconds(30),
                TimeSpan.FromSeconds(60) })
            .Build();
        this._hubConnection.On<StationSerialData>(HubConstants.Events.OnStationData,this.OnSerialComReceived);
        this._hubConnection.On<string>(HubConstants.Events.OnSerialComMessage, this.OnSerialComMessageReceived);
        this._hubConnection.On<string>(HubConstants.Events.OnUsbDisconnect,this.UsbDisconnectedHandler);
        this._hubConnection.On<string>(HubConstants.Events.OnUsbConnectFailed,this.UsbConnectFailedHandler);
        this._hubConnection.On<string>(HubConstants.Events.OnUsbConnect, this.UsbConnectHandler);
        this._hubConnection.On<bool>(HubConstants.Events.OnStationConnection, this.OnStationConnection);
        this._hubConnection.On<string>(HubConstants.Events.OnTestStarted, this.OnTestStartedHandler);
        this._hubConnection.On<string>(HubConstants.Events.OnTestStartedFailed, this.OnTestStartedFailedHandler);
        this._hubConnection.On<LoadTestSetupTransport>(HubConstants.Events.OnTestStartedFrom, this.OnTestStartedFromHandler);
        this._hubConnection.On<LoadTestSetupTransport>(HubConstants.Events.OnTestStartedFromUnknown, this.OnTestStartedFromHandler);
        this._hubConnection.On<bool, string>(HubConstants.Events.OnTestSetup, this.OnTestSetupHandler);
        this._hubConnection.On<string>(HubConstants.Events.OnTestCompleted, this.OnTestCompletedHandler);
        //this._hubConnection.On<string>(HubConstants.Events.,)
   }

   private async Task OpenSelector() {

   }

   private Task OnStationConnection(bool usbStatus) {
     this._usbConnected = usbStatus;
     return Task.CompletedTask;
   }

   private Task OnTestSetupHandler(bool success, string message) {
       if (success) {
           this.Notify("Test Setup Complete",message,NotificationSeverity.Success);
       } else {
           this.Notify("Test Setup Failed",message,NotificationSeverity.Error);
       }
       return Task.CompletedTask;
   }

   private Task OnTestStartedHandler(string message) {
       this.Notify("Test Started",message,NotificationSeverity.Success);
       return Task.CompletedTask;
   }

   private Task OnTestStartedFailedHandler(string message) {
       this.Notify("Test Failed To Start",message,NotificationSeverity.Success);
       return Task.CompletedTask;
   }

   private Task OnTestCompletedHandler(string message) {
       this.Notify("Test Completed",message,NotificationSeverity.Success);
       return Task.CompletedTask;
   }
   
   private Task OnTestStartedFromUnknownHandler(LoadTestSetupTransport transport) {
       if (transport.Success) {
           this.Notify("Unknown Test Started From Memory",transport.Message ?? "No Message",NotificationSeverity.Success);
       } else {
           this.Notify("Unknown Test Failed to Started ",transport.Message ?? "No Message",NotificationSeverity.Error);
       }
       return Task.CompletedTask;
   }
   
   private Task OnTestStartedFromHandler(LoadTestSetupTransport transport) {
       if (transport.Success) {
           this.Notify("Test Started",transport.Message ?? "No Message",NotificationSeverity.Success);
       } else {
           this.Notify("Test Failed To Start ",transport.Message ?? "No Message",NotificationSeverity.Error);
       }
       return Task.CompletedTask;
   }

   private Task ToggleTemperatureHandler() {
       if(this.Connected){
           return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand,StationCommand.ToggleHeat);
       }

       this.NotifyNotConnected();
       return Task.CompletedTask;
   }

   private Task CycleCurrentHandler() {
       if(this.Connected){
           return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand,StationCommand.CycleCurrent);
       }
       this.NotifyNotConnected();
       return Task.CompletedTask;
   }

   private Task StationHubConnectionOnOnHubConnected(Boolean stat, String arg) {
       if (stat) {
           this.Notify("Station Service Connected",arg,NotificationSeverity.Success);
       } else {
           this.Notify("Station Service Connection Failed",arg,NotificationSeverity.Error);
       }
       return Task.CompletedTask;
   }
  
   private void UsbConnectHandler(string message) {
       this.Notify("Usb Connected","Usb Connected",NotificationSeverity.Success);
       this._eventConsole.Log(message,AlertStyle.Info);
   }
  
   private Task UsbDisconnectedHandler(string message) {
       this.Notify("Usb Disconnected","Usb Disconnected",NotificationSeverity.Warning);
       this._eventConsole.Log(message, AlertStyle.Danger);
       return Task.CompletedTask;
   }
   
   private void UsbConnectFailedHandler(string message) {
       var notification=new NotificationMessage { 
           Severity = NotificationSeverity.Error, 
           Summary = "Usb Failed To Connect", 
           Detail = message, 
           Duration = 10000 };
       this.NotificationService.Notify(notification);
       this._eventConsole.Log(message,AlertStyle.Danger);
   }
   private Task OnSerialComReceived(StationSerialData data) {
       this._data = data;
       return InvokeAsync(StateHasChanged);;
   }

   private Task OnSerialComMessageReceived(string message) {
       this._eventConsole.Log(message,AlertStyle.Base);
       return Task.CompletedTask;
   }
   
   private Task SaveClickedHandler(List<WaferSetup> waferSetups) {
       if (this.Connected) {
           if (waferSetups.Any()) {
               this.Notify("Wafer Setup",$"WaferId {waferSetups[0].WaferId} " +
                                         $"\nProbe1: {waferSetups[0].Probe1.Name} " +
                                         $"\nProbe2: {waferSetups[0].Probe2.Name} " +
                                         $"\nPad1: {waferSetups[0].Probe1Pad} " +
                                         $"\nPad2: {waferSetups[0].Probe2Pad}");
               return this._hubConnection.SendAsync(HubConstants.Methods.SetupTest,new TestSetupTransport() {
                   WaferSetups = waferSetups,
                   SetCurrent = StationCurrent._60mA,
                   SetTemperature = 85,
               });
           }
           this.Notify("","");
           return Task.CompletedTask;
       }
       this.NotifyNotConnected();
       return Task.CompletedTask;
   }
   
   private Task OnStartClicked() {
       if (this.Connected) {
           if (this._data.Running) {
               var command = this._data.Paused ? StationCommand.Start : StationCommand.Pause;
               return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand, command);
           } else {
               var command = StationCommand.Start;
               return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand, command);
           }
       }
       this.NotifyNotConnected();
       return Task.CompletedTask;
   }
   
   private Task OnResetClicked() {
       if (this.Connected) {
           this._eventConsole.Log("Reset Clicked",AlertStyle.Warning);
           return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand, StationCommand.Reset);
       }
       this.NotifyNotConnected();
       return Task.CompletedTask;
   }
   
   private Task OnConnectClicked() {
       if (this.Connected) {
           this._eventConsole.Log("Disconnect Clicked",AlertStyle.Warning);
           return this._hubConnection.StopAsync();
          
       } else {
           this._eventConsole.Log("Connect Clicked",AlertStyle.Success);
           return this.StartConnection();
       }
   }

   private Task OnUsbConnectClicked() {
       if (this.Connected) {
           if (this._usbConnected) {
               this._eventConsole.Log("Usb Disconnect Clicked",AlertStyle.Warning);
               return this._hubConnection.InvokeAsync(HubConstants.Methods.ConnectUsb);
           } else {
               this._eventConsole.Log("Usb Connect Clicked",AlertStyle.Info);
               return this._hubConnection.InvokeAsync(HubConstants.Methods.ConnectUsb);
           }
       }
       this.NotifyNotConnected();
       return Task.CompletedTask;
   }
   
   private void SelectedTabChangedHandler(int tabIndex) {
       if (tabIndex != 0) {
           if (tabIndex == 1) {
               this._controlPaneCollapsed = true;
               this._runtimePaneCollapsed = true;
               this._eventPaneCollapsed = true;
           } else {
               this._controlPaneCollapsed = true;
               this._runtimePaneCollapsed = true;
           }

       } else {
           this._controlPaneCollapsed = false;
           this._runtimePaneCollapsed = false;
           this._eventPaneCollapsed = false;
       }
       //this._eventConsole.Log($"Tab Changed {tabIndex}",AlertStyle.Info);
   }
   
   private async Task StartConnection() {
       if (!this.Connected) {
           try {
               await this._hubConnection?.StartAsync();
               if (this.Connected) {
                   this._eventConsole.Log("Hub Connection Established",AlertStyle.Success);
                   this.Notify("Connected Established","Connected to Station Service",NotificationSeverity.Success);
               } else {
                   this._eventConsole.Log("Hub Connection Failed",AlertStyle.Danger);
                   this.Notify("Connected Failed","Failed to connect to Station Service",NotificationSeverity.Error,30000);
               }
           }  catch(Exception e) {
               string error = e.Message;
               if (e.InnerException != null) {
                   error+="\n"+e.InnerException.Message;
               }
               this._logger.LogError($"Hub Connection Failed, Exception: \n {error}");
               this._eventConsole.Log("Hub Connection Failed",AlertStyle.Danger);
               this.Notify("Connected Failed",$"Failed to connect to Station Service. Exception thrown:\n{error}",
                   NotificationSeverity.Error,30000);
           }
       }
   }
   
   private void Notify(string summary,string message,NotificationSeverity severity=NotificationSeverity.Info,int duration=5000) {
       var notification=new NotificationMessage { 
           Severity = severity, 
           Summary = summary, 
           Detail = message, 
           Duration = 10000 };
       this.NotificationService.Notify(notification);
   }

   private void NotifyNotConnected() {
       var notification=new NotificationMessage {
           Severity = NotificationSeverity.Error, 
           Summary = "Station Service Not Connected", 
           Detail = "Cannot Send Command", 
           Duration = 10000 };
       this.NotificationService.Notify(notification);
   }
   
   private async Task CurrentChangedHandler(StationCurrent stationCurrent) {
       this._eventConsole.Log($"Current Selection Changed.  Value {stationCurrent.Name}",AlertStyle.Danger);
   }
   
   private async Task TempChangedHandler(double temp) {
       this._eventConsole.Log($"Temp Value Changed.  Value {temp}",AlertStyle.Base);
   }
   
   public async ValueTask DisposeAsync() {
       if(this._hubConnection!=null) {
           await this._hubConnection.DisposeAsync();
       }
   }
} 

