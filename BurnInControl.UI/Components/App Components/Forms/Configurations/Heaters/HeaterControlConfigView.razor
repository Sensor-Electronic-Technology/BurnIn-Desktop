@using BurnInControl.Data.ComponentConfiguration.HeaterController
@using BurnInControl.UI.Services
@inject DialogService DialogService
@inject ConsoleWriter _consoleWriter

@if(this.HeaterControllerConfig == null) {
    <p>Loading...</p>
} else {
    <RadzenTabs TabPosition="TabPosition.Left" RenderMode="Radzen.TabRenderMode.Client">
        <Tabs>
            @foreach (var config in this.HeaterControllerConfig.HeaterConfigurations) {
                <HeaterConfigView Label="@GetLabel(config.HeaterId-1)" HeaterConfig="@config"
                                  HeaterConfigChanged="@((hconfig) => { this.HeaterControllerConfig.HeaterConfigurations[hconfig.HeaterId - 1] = hconfig;})"/>
            }
        </Tabs>
    </RadzenTabs>
}
@code {
    [Parameter]
    public HeaterControllerConfig? HeaterControllerConfig { get; set; } = new();

    private async Task ConfigChangedHandler() {
        this._consoleWriter.LogMessage("Configuration Changed",AlertStyle.Light);
    }
    
    private string GetLabel(int index) {
        if(index==0) {
            this._consoleWriter.LogMessage($"Index: {index} Left Heater Configuration",AlertStyle.Secondary);
            return "Left Heater Configuration";
        }else if (index == 1) {
            this._consoleWriter.LogMessage($"Index: {index} Middle Heater Configuration",AlertStyle.Secondary);
            return "Middle Heater Configuration";
        } else {
            this._consoleWriter.LogMessage($"Index: {index} Right Heater Configuration",AlertStyle.Secondary);
            return "Right Heater Configuration";
        }
    }
    
    
}