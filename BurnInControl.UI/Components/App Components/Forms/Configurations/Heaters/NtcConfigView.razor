@using BurnInControl.Data.ComponentConfiguration.HeaterController
@using BurnInControl.Data.StationModel.Components

<RadzenTemplateForm Data="@this.NtcConfig" Style="width: fit-content">
    <RadzenFieldset Text="NTC Configuration" Style="width: fit-content; border: 5px solid #45565e">
        <RadzenStack Gap=".1rem" 
                     JustifyContent="JustifyContent.Center" 
                     AlignItems="AlignItems.Center">
            <RadzenStack Orientation="Orientation.Horizontal"
                         Gap=".5rem"
                         JustifyContent="JustifyContent.Center"
                         AlignItems="AlignItems.Center">
                <ExponentialInput Label="ACoeff" 
                                  Value="@this.NtcConfig.ACoeff"
                                  ValueChanged="@(async Task (val) => { this.NtcConfig.ACoeff = val; await this.NtcConfigChanged.InvokeAsync(this.NtcConfig); })"/>
                <ExponentialInput Label="BCoeff" 
                                  Value="@this.NtcConfig.BCoeff"
                                  ValueChanged="@(async Task (val) => { this.NtcConfig.BCoeff = val; await this.NtcConfigChanged.InvokeAsync(this.NtcConfig); })"/>
            </RadzenStack>
            <ExponentialInput Label="CCoeff" 
                              Value="@this.NtcConfig.CCoeff"
                              ValueChanged="@(async Task (val) => { this.NtcConfig.CCoeff = val; await this.NtcConfigChanged.InvokeAsync(this.NtcConfig); })"/>
            <RadzenStack Orientation="Orientation.Horizontal"
                         AlignItems="AlignItems.Center"
                         JustifyContent="JustifyContent.Center">
                <AnalogPinSelector AnalogPin="@this.NtcConfig.Pin" 
                                   AnalogPinChanged="@this.AnalogPinChangedHandler"/>
                <FilterInput FilterWeight="@this.NtcConfig.fWeight"
                             FilterWeightChanged="@(async Task (val) => { this.NtcConfig.fWeight = val; await this.NtcConfigChanged.InvokeAsync(this.NtcConfig);})"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenFieldset>
</RadzenTemplateForm>


@code {
    [Parameter]
    public NtcConfiguration NtcConfig { get; set; }
    
    [Parameter]
    public EventCallback<NtcConfiguration> NtcConfigChanged { get; set; }
    
    private async Task ConfigChanged() {
        await this.NtcConfigChanged.InvokeAsync(this.NtcConfig);
    }

    private Task AnalogPinChangedHandler(sbyte newValue) {
        this.NtcConfig.Pin = newValue;
        return this.ConfigChanged();
    }
}