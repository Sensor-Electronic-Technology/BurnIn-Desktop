@using System.Collections
@using BurnInControl.UI.Components.App_Components.Displays
@using Ardalis.SmartEnum;
@using BurnInControl.Data.BurnInTests.Wafers
@using BurnInControl.Data.StationModel.Components
@using BurnInControl.Infrastructure.QuickTest
@using BurnInControl.UI.Components.App_Components.Controls.WaferMap
@using BurnInControl.UI.Components.App_Components.Dialogs
@using QuickTest.Data.DataTransfer
@using QuickTest.Data.Models.Wafers.Enums
@inject QuickTestDataService QuickTestDataService
@inject NotificationService NotificationService
@inject DialogService DialogService

@if (this.WaferSetup != null) {
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="10" Style="width: fit-content">
        <RadzenText Text="@this.PocketCaption"/>
        <RadzenStack AlignItems="AlignItems.Center">
            <WaferIdInput WaferId="@this._waferId"
                          WaferList="@this.WaferList"
                          WaferIdChanged="WaferIdChangedHandler"/>
            <RadzenTabs>
                <Tabs>
                    <RadzenTabsItem Text="Map Selector" Selected="true">
                        <WaferImageMap Map="@this.Map"
                                       SelectedPad1="@this._p1"
                                       SelectedPad2="@this._p2"/>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Manual Probe">
                        <RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal">
                                <RadzenFieldset Text="Probe 1">
                                    <RadzenDropDown TValue="string"
                                                    ReadOnly="true"
                                                    Data=@this._probes
                                                    ValueChanged="@this.Probe1Changed"
                                                    Style="width: 100px"/>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Pad 1">
                                    <RadzenDropDown TValue="string"

                                                    Data=@this._pads
                                                    ValueChanged="@this.Pad1Changed"
                                                    Style="width: 100px"/>
                                </RadzenFieldset>

                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal">
                                <RadzenFieldset Text="Probe 2">
                                    <RadzenDropDown TValue="string"
                                                    Data=@this._probes
                                                    ValueChanged="@this.Probe2Changed"
                                                    Style="width: 100px"/>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Pad 2">
                                    <RadzenDropDown TValue="string"
                                                    Data=@this._pads
                                                    ValueChanged="@this.Pad2Changed"
                                                    Style="width: 100px"/>
                                </RadzenFieldset>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </RadzenStack>
    </RadzenStack>
}

@code {
    [Parameter] public string PocketCaption { get; set; } = "Pocket X";
    [Parameter] public IEnumerable<Pad> Map { get; set; }
    [Parameter] public WaferSetup? WaferSetup { get; set; }=new WaferSetup();
    [Parameter] public EventCallback<WaferSetup> WaferSetupChanged { get; set; }
    [Parameter] public IEnumerable<string> WaferList { get; set; }

    private string _waferId="Not Set";
    
    private string? _p1="";
    private string? _p2="";

    private List<string> _pads=PadLocation.List.Select(x => x.Value).ToList();
    private List<string> _probes=StationProbe.List.Select(x => x.Name).ToList();
    private bool _exists = false;
    private IEnumerable<Pad> _map=[];

    protected override async Task OnInitializedAsync() {
        this._map = await this.QuickTestDataService.GetWaferMap(2);
    }

    protected override Task OnParametersSetAsync() {
        this._p1 = this._probes.FirstOrDefault(e => e==this.WaferSetup?.Probe1?.Name) ?? StationProbe.Probe1.Name;
        this._p2 = this._probes.FirstOrDefault(e => e==this.WaferSetup?.Probe2?.Name) ?? StationProbe.Probe2.Name;
        return base.OnParametersSetAsync();
    }
    private async Task CheckWaferExists() {
        this.NotificationService.Notify(NotificationSeverity.Warning, "Not implemented yet.");
        var result=await this.QuickTestDataService.QuickTestExists(this._waferId);
        if (result.IsError) {
            await this.DialogService.Alert($"Error while checking wafer: {result.FirstError.Description}", "Error");
            this._exists = false;
        } else {
            this._exists = result.Value;
        }
    }

    private Task WaferIdChanged(string value) {
        this.WaferSetup.WaferId = value;
        this._waferId = value;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task Pad1Changed(string value) {
        this.WaferSetup.Probe1Pad = value;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task Pad2Changed(string value) {
        this.WaferSetup.Probe2Pad = value;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task Probe1Changed(string value) {
        this.WaferSetup.Probe1 = StationProbe.FromName(value);
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task Probe2Changed(string value) {
        this.WaferSetup.Probe1 = StationProbe.FromName(value);
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private void WaferIdChangedHandler(string waferId) {
        this._waferId = waferId;
    }
}