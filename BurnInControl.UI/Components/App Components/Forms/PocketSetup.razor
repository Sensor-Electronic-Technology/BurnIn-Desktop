@using BurnInControl.UI.Components.App_Components.Displays
@using Ardalis.SmartEnum;
@using BurnInControl.Data.BurnInTests.Wafers
@using BurnInControl.Data.StationModel.Components
@inject NotificationService NotificationService
@if (this.WaferSetup != null) {
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="10" Style="width: fit-content">
        <RadzenText Text="@this.PocketCaption"/>
        <RadzenStack AlignItems="AlignItems.Center">
            <RadzenStack Orientation="Orientation.Vertical" 
                         JustifyContent="JustifyContent.Center" 
                         AlignItems="AlignItems.Center">
                <RadzenFieldset Text="Wafer" Style="height: fit-content">
                    <RadzenTextBox Value="@this.WaferSetup.WaferId" ValueChanged="@this.WaferIdChanged"/>
                </RadzenFieldset>
                <RadzenStack Orientation="Orientation.Horizontal" 
                             AlignItems="AlignItems.Center">
                    <RadzenButton Text="Check" Click="@this.CheckWaferExists" 
                                  Style="height: 25px; width: 100px"/>
                    <RadzenStack Orientation="Orientation.Horizontal" 
                                 AlignItems="AlignItems.Center">
                        <RadzenLabel Text="Exists?"/>
                        <LedIndicator LedOnColor="led-green" 
                                      State="@this._exists" 
                                      LedSize="30px"/>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenFieldset Text="Probe 1">
                    <RadzenDropDown TValue="string"
                                    Data=@this._probes
                                    ValueChanged="@this.Probe1Changed"
                                    Style="width: 100px"/>
                </RadzenFieldset>
                <RadzenFieldset Text="Pad 1">
                    <RadzenDropDown TValue="string"
                                    Data=@this._pads
                                    ValueChanged="@this.Pad1Changed"
                                    Style="width: 100px"/>
                </RadzenFieldset>

            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenFieldset Text="Probe 2">
                    <RadzenDropDown TValue="string"
                                    Data=@this._probes
                                    ValueChanged="@this.Probe2Changed"
                                    Style="width: 100px"/>
                </RadzenFieldset>
                <RadzenFieldset Text="Pad 2">
                    <RadzenDropDown TValue="string" 
                                    Data=@this._pads
                                    ValueChanged="@this.Pad2Changed"
                                    Style="width: 100px"/>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
}

@code {
    [Parameter] public string PocketCaption { get; set; } = "Pocket X";
    
    [Parameter] public WaferSetup? WaferSetup { get; set; }=new WaferSetup();
    [Parameter] public EventCallback<WaferSetup> WaferSetupChanged { get; set; }
    
    private string? _p1="";
    private string? _p2="";

    private List<string> _pads=PadLocation.List.Select(x => x.Value).ToList();
    private List<string> _probes=StationProbe.List.Select(x => x.Name).ToList();
    private bool _exists = false;

    protected override Task OnParametersSetAsync() {
        /*this._pads=PadLocation.List.Select(x => x.Value).ToList();
        this._probes=StationProbe.List.Select(x => x.Name).ToList();*/
        if (this.WaferSetup != null) {
            this._p1 = this._probes.FirstOrDefault(e => e==this.WaferSetup.Probe1?.Name) ?? StationProbe.Probe1.Name;
            this._p2 = this._probes.FirstOrDefault(e => e==this.WaferSetup.Probe2?.Name) ?? StationProbe.Probe2.Name;
        } else {
            this._p1 = StationProbe.Probe1.Name;
            this._p2 = StationProbe.Probe2.Name;
        }

        return base.OnParametersSetAsync();
    }

    private Task CheckWaferExists() {
        this.NotificationService.Notify(NotificationSeverity.Warning, "Not implemented yet.");
        this._exists = true;
        return Task.CompletedTask;
    }

    private Task WaferIdChanged(string value) {
        this.WaferSetup.WaferId = value;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task Pad1Changed(string value) {
        this.WaferSetup.Probe1Pad = value;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task Pad2Changed(string value) {
        this.WaferSetup.Probe2Pad = value;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task Probe1Changed(string value) {
        this.WaferSetup.Probe1 = StationProbe.FromName(value);
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task Probe2Changed(string value) {
        this.WaferSetup.Probe1 = StationProbe.FromName(value);
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
}