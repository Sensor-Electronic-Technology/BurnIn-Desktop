@using System.Collections
@using BurnInControl.UI.Components.App_Components.Displays
@using Ardalis.SmartEnum;
@using BurnInControl.Data.BurnInTests.Wafers
@using BurnInControl.Data.StationModel.Components
@using BurnInControl.Infrastructure.QuickTest
@using BurnInControl.UI.Components.App_Components.Controls.WaferMap
@using BurnInControl.UI.Components.App_Components.Dialogs
@using QuickTest.Data.DataTransfer
@using QuickTest.Data.Models.Wafers.Enums
@using BurnInControl.UI.Components.App_Components.Controls.ProbePads
@inject QuickTestDataService QuickTestDataService
@inject NotificationService NotificationService
@inject DialogService DialogService


<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="1" >
    <RadzenText Text="@this.PocketCaption"/>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
            <RadzenFieldset Text="Pocket Loaded?">
                <RadzenStack Orientation="Orientation.Vertical" 
                             AlignItems="AlignItems.Center" Gap="0.5rem">
                    <RadzenLabel Text="@(this.WaferSetup.Loaded ? "Loaded":"Not Loaded")" Component="Loaded" />
                    <RadzenSwitch Value="@this.WaferSetup.Loaded" ValueChanged="@this.LoadedChangedHandler"  Name="Loaded" />
                </RadzenStack>
            </RadzenFieldset>
            <WaferIdInput WaferId="@this.WaferSetup.WaferId"
                          WaferList="@this.WaferList"
                          WaferIdChanged="@this.WaferIdChangedHandler"/>
            @*<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                    <RadzenFieldset Text="Probe 1">
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenToggleButton Text="Activate Probe 1" 
                                                Value="@this._probe1Active" 
                                                Click="@this.ActivateProbe1"/>
                            <RadzenDropDown TValue="string"
                                            Value="@this.WaferSetup.Probe1Pad"
                                            Data=@this._pads
                                            ValueChanged="@this.Probe1PadChanged"
                                            ReadOnly="@(!this._probe1Active)"
                                            Style="width: 100px"/>
                        </RadzenStack>
                    </RadzenFieldset>
                    <RadzenFieldset Text="Probe 2">
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenToggleButton Text="Activate Probe 2"
                                                Value="@this._probe2Active"
                                                Click="@this.ActivateProbe2"/>
                            <RadzenDropDown TValue="string"
                                            Value="@this.WaferSetup.Probe2Pad"
                                            ReadOnly="@(!this._probe2Active)"
                                            ValueChanged="@this.Probe2PadChanged"
                                            Data=@this._pads
                                            Style="width: 100px"/>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>*@
            <PadSelectors Pads="@this._pads"
                          Probe1Active="@this._probe1Active"
                          Probe1ActiveChanged="@((bool value) => this._probe1Active = value)"
                          Probe2Active="@this._probe2Active"
                          Probe2ActiveChanged="@((bool value) => this._probe2Active = value)"
                          Probe1Pad="@this.WaferSetup.Probe1Pad"
                          Probe1PadChanged="@this.Probe1PadChangedHandler"
                          Probe2Pad="@this.WaferSetup.Probe2Pad"
                          Probe2PadChanged="@this.Probe2PadChangedHandler"/>
        </RadzenStack>
        @if (this.Map!=null) {
            <WaferImageMap Map="@this.Map"
                           SelectedPad1="@this.WaferSetup.Probe1Pad"
                           SelectedPad2="@this.WaferSetup.Probe2Pad"
                           SelectedPad1Changed="@this.MapPad1ChangedHandler"
                           SelectedPad2Changed="@this.MapPad2ChangedHandler"
                           Probe1Active="@this._probe1Active"
                           Probe2Active="@this._probe2Active"/>
        }
    </RadzenStack>
</RadzenStack>


@code {
    [Parameter] public string PocketCaption { get; set; } = "Pocket X";
    [Parameter] public IEnumerable<Pad>? Map { get; set; }=Enumerable.Empty<Pad>();
    [Parameter] public WaferSetup WaferSetup { get; set; }=new WaferSetup();
    [Parameter] public EventCallback<WaferSetup> WaferSetupChanged { get; set; }
    [Parameter] public IEnumerable<string> WaferList { get; set; }
    
    private bool _probe1Active=false;
    private bool _probe2Active=false;
    private List<string>? _pads;
    private bool _exists = false;
    private IEnumerable<Pad> _map=[];

    protected override async Task OnInitializedAsync() {
        this._map = await this.QuickTestDataService.GetWaferMap(2);
        this._pads = this._map.Where(e=>!string.IsNullOrEmpty(e.Identifier)).Select(e => e.Identifier!).ToList();
    }
    
    private async Task CheckWaferExists() {
        if (!string.IsNullOrEmpty(this.WaferSetup.WaferId)) {
            var result=await this.QuickTestDataService.QuickTestExists(this.WaferSetup.WaferId);
            if (result.IsError) {
                await this.DialogService.Alert($"Error while checking wafer: {result.FirstError.Description}", "Error");
                this._exists = false;
            } else {
                this._exists = result.Value;
            }
        } else {
            this.NotificationService.Notify(NotificationSeverity.Warning, "Wafer ID is empty", "Please enter a wafer ID");
        }
    }
    
    private void WaferIdChangedHandler(string waferId) {
        this.WaferSetup.WaferId = waferId;
        this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }

    private Task Probe1PadChangedHandler(object obj) {
        var selected=obj as string;
        this.WaferSetup.Probe1Pad = selected;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task Probe2PadChangedHandler(object obj) {
        var selected=obj as string;
        this.WaferSetup.Probe2Pad = selected;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }

    private Task MapPad1ChangedHandler(string pad) {
        this.WaferSetup.Probe1Pad = pad;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }
    
    private Task MapPad2ChangedHandler(string pad) {
        this.WaferSetup.Probe2Pad = pad;
        return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }

    private Task LoadedChangedHandler(bool value) {
       this.WaferSetup.Loaded= value;
       return this.WaferSetupChanged.InvokeAsync(this.WaferSetup);
    }

}