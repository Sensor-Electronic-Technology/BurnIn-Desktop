@using BurnInControl.Data.BurnInTests.Wafers
@using BurnInControl.Data.StationModel.Components
@using BurnInControl.Infrastructure.QuickTest
@using BurnInControl.UI.Components.App_Components.Controls.WaferMap
@using BurnInControl.UI.Components.App_Components.Dialogs
@using QuickTest.Data.DataTransfer
@inject DialogService DialogService
@inject QuickTestDataService QuickTestDataService

<RadzenStack Orientation="Orientation.Vertical">
    <RadzenTabs RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Right Pocket(P1)">
                <PocketSetup PocketCaption="Pocket 1"
                             @bind-WaferSetup="@this._pocket1Setup"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Middle Pocket(P2)">
                <PocketSetup PocketCaption="Pocket 2"
                             @bind-WaferSetup="@this._pocket2Setup"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Left Pocket(P3)">
                <PocketSetup PocketCaption="Pocket 3"
                             @bind-WaferSetup="@this._pocket3Setup"/>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center"
                 JustifyContent="JustifyContent.Center">
        <RadzenButton Text="Save" Size="ButtonSize.Large"
                      Click="@this.SaveHandler"
                      ButtonStyle="ButtonStyle.Secondary"
                      Icon="save" Style="width: 170px"/>
        <RadzenButton Text="Cancel/Clear"
                      ButtonStyle="ButtonStyle.Danger"
                      Size="ButtonSize.Large" Icon="cancel"
                      Click="@this.Cancel"
                      IsBusy="false"
                      Shade="Shade.Default"
                      Disabled="false"/>
    </RadzenStack>
</RadzenStack>
@code {
    [Parameter] public EventCallback<List<WaferSetup>> Save { get; set; }
    [Parameter] public IEnumerable<Pad>? Map { get; set; }
    private IEnumerable<string> _waferList=Enumerable.Empty<string>();

    WaferSetup _pocket1Setup = new WaferSetup() {
        WaferId = "W01",
        BurnNumber = 1,
        StationPocket = StationPocket.LeftPocket,
        Probe1=StationProbe.Probe1,
        Probe2=StationProbe.Probe2,
        Probe1Pad = "a",
        Probe2Pad = "b",
    };
    
    WaferSetup _pocket2Setup = new WaferSetup() {
        WaferId = "W02",
        BurnNumber = 1,
        StationPocket = StationPocket.MiddlePocket,
        Probe1=StationProbe.Probe3,
        Probe2=StationProbe.Probe4,
        Probe1Pad = "d",
        Probe2Pad = "l",
    };
    
    WaferSetup _pocket3Setup = new WaferSetup() {
        WaferId = "W03",
        BurnNumber = 1,
        StationPocket = StationPocket.RightPocket,
        Probe1=StationProbe.Probe5,
        Probe2=StationProbe.Probe6,
        Probe1Pad = "t",
        Probe2Pad = "g",
    };


    protected override async Task OnInitializedAsync() {
        this.Map = await this.QuickTestDataService.GetWaferMap(2);
        
    }

    private Task SaveHandler() {
        return this.Save.InvokeAsync(new List<WaferSetup>() {
            _pocket1Setup,
            _pocket2Setup,
            _pocket3Setup
        });
    }
    
    private Task Cancel() {
        return Task.CompletedTask;
    }
    
    
}