@using BurnInControl.UI.Data
@inject NotifyPlotOptions NotifyPlotOptions
@rendermode InteractiveServer
<RadzenStack Orientation="Orientation.Vertical"
             JustifyContent="JustifyContent.Center"
             AlignItems="AlignItems.Center" Style="width: fit-content">
    <RadzenFieldset Text="Switch Mode">
        <RadzenToggleButton Text="@(_swButtonValue ? "AutoTune" : "Heating")"
                            @bind-Value="@_swButtonValue"
                            Click="@ModeSwPressed"
                            ToggleButtonStyle="ButtonStyle.Info" 
                            ToggleShade="Shade.Dark"/>
    </RadzenFieldset>
    <RadzenFieldset Text="Tune Control" Visible="true">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="Start" Click="@StartPressedHandler"/>
            <RadzenButton Text="Cancel" Click="@CancelPressedHandler"/>
        </RadzenStack>
    </RadzenFieldset>
    <RadzenFieldset Text="Tune Save/Discard">
        <RadzenButton Text="Save" Click="@SavePressed" Style="margin: .2rem; width:100px;"/>
        <RadzenButton Text="Discard" Click="@DiscardPressed" Style="margin: .2rem; width:100px;"/>
    </RadzenFieldset>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenFieldset Text="YAxis" Style="width: 100px;">
            <RadzenFormField Text="Min">
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.YAxisMin"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
            <RadzenFormField Text="Max">
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.YAxisMax"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
        </RadzenFieldset>
        <RadzenFieldset Text="XAxis" Style="width: 100px;">
            <RadzenFormField Text="Min" >
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.XAxisMin"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
            <RadzenFormField Text="Max" >
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.XAxisMax"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
        </RadzenFieldset>
        <RadzenFieldset Text="XY Step" Style="width: 100px;">
            <RadzenFormField Text="X">
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.XAxisStep"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
            <RadzenFormField Text="Y">
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.YAxisStep"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
        </RadzenFieldset>
    </RadzenStack>
</RadzenStack>

@code {
    private bool _swButtonValue=false;
    private string _swButtonText="AutoTune";
    private PlotAxisOptions _plotOptions=new PlotAxisOptions();
    
    [Parameter]
    public EventCallback ModeSwPressed { get; set; }
    [Parameter]
    public EventCallback StartPressed { get; set; }
    [Parameter]
    public EventCallback CancelPressed { get; set; }
    [Parameter]
    public EventCallback SavePressed { get; set; }
    [Parameter]
    public EventCallback DiscardPressed { get; set; }
    
    private Task StartPressedHandler() {
        return this.StartPressed.InvokeAsync();
    }
    
    private Task CancelPressedHandler() {
        return this.CancelPressed.InvokeAsync();
    }
    
    private Task Notify() {
        return NotifyPlotOptions.Set(_plotOptions);
    }

}