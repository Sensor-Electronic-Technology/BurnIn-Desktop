@using BurnInControl.UI.Data
@using QuickTest.Data.DataTransfer
@inject NotificationService NotificationService
@rendermode InteractiveServer
<style>
    circle:hover{
        cursor: pointer;
    }
</style>

<svg viewBox="0 0 826 810" width="800" height="700"  >
    <image class="mainProject"
           xlink:href="images/WaferMask2in.png"
           width="826" height="810" />
    @foreach (var circ in _svgCircles) {
        <circle cx="@circ.X" cy="@circ.Y"
                r="@circ.Radius"
                id="@circ.AltTex"
                fill="@circ.Fill"
                fill-opacity="@circ.Opacity"
                onclick="@(()=>this.CircleClickHandler(circ.AltTex))">
        </circle>
    }
</svg>

@code {
    
    [Parameter] public IEnumerable<Pad> Map { get; set; }
    
    private List<SvgCircle> _svgCircles = new List<SvgCircle>();

    /*private List<SvgCircle> _svgCircles = new List<SvgCircle>() {
        new SvgCircle() { X = 143, Y = 365, Radius = 8,AltTex = "r1", PostBackValue = "r1",Fill = "grey",State = false,Opacity = "0"},
        new SvgCircle() { X = 160, Y = 365, Radius = 8,AltTex = "r2", PostBackValue = "r2",Fill = "grey",State = false,Opacity = "0" },
        new SvgCircle() { X = 180, Y = 365, Radius = 8,AltTex = "r3", PostBackValue = "r3",Fill = "grey",State = false,Opacity = "0" },
        new SvgCircle() { X = 142, Y = 441, Radius = 8,AltTex = "r4", PostBackValue = "r4",Fill = "grey",State = false,Opacity = "0" },
    };*/

    protected override Task OnParametersSetAsync() {
        this._svgCircles = this.Map.Select(e => new SvgCircle() {
            X = e.X,
            Y = e.Y,
            Radius = e.Radius,
            AltTex = e.Identifier,
            PostBackValue = e.Identifier,
            Fill = "grey",
            State = false,
            Opacity = "0"
        }).ToList();
        return base.OnParametersSetAsync();
    }

    private async Task CircleClickHandler(string id) {
        var area = this._svgCircles.FirstOrDefault(e => e.AltTex == id);
        if(area != null) {
            area.State = !area.State;
            area.Opacity = area.State ? "100" : "0";
            this.StateHasChanged();
        }

        this.NotificationService.Notify(new NotificationMessage() {
            Severity = NotificationSeverity.Success,
            Summary = "Area Clicked",
            Detail = $"You clicked on {id}"
        });
    }

    
}