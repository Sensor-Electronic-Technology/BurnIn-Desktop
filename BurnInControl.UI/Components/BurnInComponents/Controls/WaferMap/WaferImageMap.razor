@using BurnInControl.Infrastructure.QuickTest
@using BurnInControl.Shared
@using BurnInControl.UI.Data
@using QuickTest.Data.DataTransfer
@inject NotificationService NotificationService
@inject ILogger<WaferImageMap> _logger
@rendermode InteractiveServer
<style>
    circle:hover{
        cursor: pointer;
    }
    .p1-dot {
        height: 25px;
        width: 25px;
        background-color: green;
        border-radius: 50%;
        display: inline-block;
    }
    .p2-dot {
        height: 25px;
        width: 25px;
        background-color: blue;
        border-radius: 50%;
        display: inline-block;
    }
    .available-dot {
        height: 25px;
        width: 25px;
        background-color: orange;
        border-radius: 50%;
        display: inline-block;
    }
</style>

<RadzenStack Orientation="Orientation.Vertical">
    <RadzenFieldset Text="Scaling Factor" 
                    AllowCollapse="true" 
                    Collapsed="true">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenSlider Value="@this._scalingFactor" 
                          Change="@this.ScaleChanged"
                          Min="0" Max="10" TValue="int"/>
            <RadzenText Text="@this._dimensions"/>
        </RadzenStack>
    </RadzenFieldset>
    <RadzenFieldset Text="Legend" AllowCollapse="true" Collapsed="true">
        <RadzenStack Orientation="Orientation.Horizontal" 
                     Gap="20"
                     JustifyContent="JustifyContent.Center">
            <RadzenStack Gap="1">
                <RadzenText Text="Probe 1"/>
                <span class="p1-dot"></span>
            </RadzenStack>
            <RadzenStack Gap="1">
                <RadzenText Text="Probe 2"/>
                <span class="p2-dot"></span>
            </RadzenStack>
            <RadzenStack Gap="1">
                <RadzenText Text="Available"/>
                <span class="available-dot"></span>
            </RadzenStack>
        </RadzenStack>
    </RadzenFieldset>
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenFieldset Text="Select pads" AllowCollapse="true">
            @if (this.WaferMap != null) {
                <svg viewBox="@this.WaferMap.ViewBoxString" height="@this._height" width="@this._width">
                    <image class="mainProject"
                           href="@this.WaferMap.WaferMapPath"
                           width="@this.WaferMap.SvgWidth" height="@this.WaferMap.SvgHeight"/>
                        @if (this._displayMap != null && this._displayMap.Any()) {
                            @foreach (var circ in this._displayMap) {
                                <circle cx="@circ.X" cy="@circ.Y"
                                        r="@circ.Radius"
                                        id="@circ.AltTex"
                                        fill="@circ.Fill"
                                        fill-opacity="@circ.Opacity"
                                        onclick="@(() => this.CircleClickHandler(circ.AltTex))">
                                </circle>
                            }
                            @if (this._selected != null && this._selected.Any()) {
                                @foreach (var circ in this._selected) {
                                    <circle cx="@circ.X" cy="@circ.Y"
                                            r="@circ.Radius"
                                            id="@circ.AltTex"
                                            fill="@circ.Fill"
                                            fill-opacity="@circ.Opacity"
                                            onclick="@(() => this.CircleClickHandler(circ.AltTex))">
                                    </circle>
                                }
                            } 
                        }
                </svg>
            }
        </RadzenFieldset>
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter] public string? SelectedPad1 { get; set; }
    [Parameter] public string? SelectedPad2 { get; set; }
    [Parameter] public EventCallback<string> SelectedPad1Changed { get; set; }
    [Parameter] public EventCallback<string> SelectedPad2Changed { get; set; }
    [Parameter] public bool Probe1Active { get; set; } = false;
    [Parameter] public bool Probe2Active { get; set; } = false;
    [Parameter] public WaferMapDto? WaferMap { get; set; }
    [Parameter] public List<string>? AvailablePads { get; set; }
    [Parameter] public List<string>? TestedPads { get; set; }
    
    
    private string _viewBox = "0 0 0 0";
    private int _svgWidth = 0;
    private int _svgHeight = 0;
    private string _defaultFill = "orange";
    private string _probe1Fill = "green";
    private string _probe2Fill = "blue";
    private string? _pad1Store;
    private string? _pad2Store;
    
    private int _height = 410;
    private int _width = 426;
    private int _scalingFactor = 0;
    private string _dimensions = "410,426";
    private string _imagePath = "";
    private List<SvgCircle> _waferMap = new List<SvgCircle>();
    private List<SvgCircle>? _displayMap;
    private List<SvgCircle>? _selected;
    
    
    
    protected override async Task OnInitializedAsync() {
        if (this.WaferMap != null) {
            this._scalingFactor = this.WaferMap.WaferSize;
            this._viewBox=this.WaferMap.ViewBoxString!;
            this._svgWidth=this.WaferMap.SvgWidth;
            this._svgHeight=this.WaferMap.SvgHeight;
            this._imagePath = this.WaferMap.WaferMapPath!;
            this._scalingFactor = 2;
            this._waferMap = this.WaferMap.MapPads.Select(e => new SvgCircle() {
                X = e.X,
                Y = e.Y,
                Radius = e.Radius,
                AltTex = e.Identifier ?? "",
                PostBackValue = e.Identifier ?? "",
                Fill = "green",
                State = false,
                Opacity = "0"
            }).ToList();
            this._height=this.WaferMap.ImageHeight+(50*this._scalingFactor);
            this._width=this.WaferMap.ImageHeight+(50*this._scalingFactor);
            this._dimensions = $"{this._height},{this._width}";
        }
    }

    protected override async Task OnParametersSetAsync() {
        this.AvailablePadsSetHandler();
        await this.Probe1ParamSetHandler();
        if(this._pad2Store!=this.SelectedPad2 && this.Probe2Active) {
            await this.Probe2ParamSetHandler();
        }
    }

    private void AvailablePadsSetHandler() {
        if (this.AvailablePads != null && this.AvailablePads.Any()) {
            this._displayMap = this._waferMap.Where(e => this.AvailablePads.Contains(e.AltTex)).ToList();
            this._displayMap.ForEach(e=> {
                e.Fill = this._defaultFill;
                e.Opacity= "50";
            });
        } else {
            this._displayMap?.Clear();
        }
    }

    private async Task Probe1ParamSetHandler() {
        if(this._pad1Store!=this.SelectedPad1 && this.Probe1Active) {
            if (string.IsNullOrEmpty(this.SelectedPad1)) {
                //clear
                if (!string.IsNullOrEmpty(this._pad1Store)) {
                    this._selected?.RemoveAll(e => e.AltTex == this._pad1Store);
                    this._pad1Store = this.SelectedPad1;
                }
            }else if (this.SelectedPad1 == this.SelectedPad2) {
                await this.Notify(NotificationSeverity.Warning,
                    "Duplicate Pad Selected",
                    "Probe 1 cannot be the same pad as Probe 2.");
                this.SelectedPad1=this._pad1Store;
            }else {
                if (!string.IsNullOrEmpty(this._pad1Store)) {
                    this._selected?.RemoveAll(e => e.AltTex == this._pad1Store);
                    var area = this._displayMap?.FirstOrDefault(e => e.AltTex == this.SelectedPad1);
                    if(area != null) {
                        var selected = new SvgCircle { 
                            Fill = this._probe1Fill,
                            Opacity = "100", 
                            State = true, 
                            AltTex = area.AltTex,
                            X = area.X,
                            Y = area.Y,
                            Radius = area.Radius
                        };
                        this._selected ??= new List<SvgCircle>();
                        this._selected.Add(selected);
                    }
                    this._pad1Store = this.SelectedPad1;
                } else {
                    var area = this._displayMap?.FirstOrDefault(e => e.AltTex == this.SelectedPad1);
                    if(area != null) {
                        var selected = new SvgCircle { 
                            Fill = this._probe1Fill, 
                            Opacity = "100", 
                            State = true,
                            AltTex = area.AltTex,
                            X = area.X,
                            Y = area.Y,
                            Radius = area.Radius
                        };
                        this._selected ??= new List<SvgCircle>();
                        this._selected.Add(selected);
                    }
                    this._pad1Store = this.SelectedPad1;
                    await this.Notify(NotificationSeverity.Success,
                        "Probe 1 set",
                        $"Probe 1 set to {this.SelectedPad1}.");
                }
            }
        }
    }

    private async Task Probe2ParamSetHandler() {
        if (string.IsNullOrEmpty(this.SelectedPad2)) {
            //clear
            if (!string.IsNullOrEmpty(this._pad2Store)) {
                this._selected?.RemoveAll(e => e.AltTex == this._pad2Store);
                this._pad2Store = this.SelectedPad2;
            }
        }else if (this.SelectedPad2 == this.SelectedPad1) {
            await this.Notify(NotificationSeverity.Warning,
                "Duplicate Pad Selected",
                "Probe 2 cannot be the same pad as Probe 1.");
            this.SelectedPad2=this._pad2Store;
        }else {
            if (!string.IsNullOrEmpty(this._pad2Store)) {
                this._selected?.RemoveAll(e => e.AltTex == this._pad2Store);
                var area = this._displayMap?.FirstOrDefault(e => e.AltTex == this.SelectedPad2);
                if(area != null) {
                    var selected = new SvgCircle { 
                        Fill = this._probe2Fill, 
                        Opacity = "100", 
                        State = true,
                        AltTex = area.AltTex,
                        X = area.X,
                        Y = area.Y,
                        Radius = area.Radius
                    };
                    this._selected ??= new List<SvgCircle>();
                    this._selected.Add(selected);
                }
                this._pad2Store = this.SelectedPad2;
            } else {
                var area = this._displayMap?.FirstOrDefault(e => e.AltTex == this.SelectedPad2);
                if(area != null) {
                    var selected = new SvgCircle { 
                        Fill = this._probe2Fill, 
                        Opacity = "100", 
                        State = true,
                        AltTex = area.AltTex,
                        X = area.X,
                        Y = area.Y,
                        Radius = area.Radius
                    };
                    this._selected ??= new List<SvgCircle>();
                    this._selected.Add(selected);
                }
                this._pad2Store = this.SelectedPad2;
            }
        }
    }

    private async Task CircleClickHandler(string id) {
        //var area = this._waferMap.FirstOrDefault(e => e.AltTex == id);
        var area=this._displayMap?.FirstOrDefault(e => e.AltTex == id);
        if(area != null && (this.Probe1Active || this.Probe2Active)) {
            if (this.Probe1Active) {
                if (!string.IsNullOrEmpty(this.SelectedPad2)) {
                    if(this.SelectedPad2==id) {
                        await this.Notify(NotificationSeverity.Warning, 
                            "Duplicate Pad Selected", 
                            "Probe 1 cannot be the same pad as Probe 2.");
                        return;
                    }
                }
                await Probe1ClickHandler(id, area);
            }else if (this.Probe2Active) {
                if (!string.IsNullOrEmpty(this.SelectedPad1)) {
                    if(this.SelectedPad1==id) {
                        await this.Notify(NotificationSeverity.Warning, 
                            "Duplicate Pad Selected", 
                            "Probe 2 cannot be the same pad as Probe 1.");
                        return;
                    }
                }
                await Probe2ClickHandler(id, area);
            }
            await InvokeAsync(StateHasChanged);
        } else {
            await this.Notify(NotificationSeverity.Warning, 
                "No Probe Selected", 
                "Please select a probe before selecting a pad.");
        }
    }

    private async Task Probe2ClickHandler(string id, SvgCircle area) {
        if (this.SelectedPad2 == id) {
            this.SelectedPad2 = string.Empty;
            this._pad2Store = string.Empty;
            this._selected?.RemoveAll(e => e.AltTex == id);
            await this.SelectedPad2Changed.InvokeAsync(this.SelectedPad2);
        }else if (string.IsNullOrEmpty(this.SelectedPad2)) {
            this.SelectedPad2 = id;
            this._pad2Store = this.SelectedPad2;
            var selected = new SvgCircle { 
                Fill = this._probe2Fill, 
                Opacity = "100", 
                State = true,
                AltTex = area.AltTex,
                X = area.X,
                Y = area.Y,
                Radius = area.Radius
            };
            this._selected ??= new List<SvgCircle>();
            this._selected.Add(selected);
            await this.SelectedPad2Changed.InvokeAsync(this.SelectedPad2);
        } else {
            var previous=this._displayMap?.FirstOrDefault(e => e.AltTex == this.SelectedPad2);
            if(previous != null) {
                this._selected?.RemoveAll(e=>e.AltTex==previous.AltTex);
            }
            this.SelectedPad2 = id;
            this._pad2Store = this.SelectedPad2;
            var selected = new SvgCircle { 
                Fill = this._probe2Fill, 
                Opacity = "100", 
                State = true,
                AltTex = area.AltTex,
                X = area.X,
                Y = area.Y,
                Radius = area.Radius
            };
            this._selected ??= new List<SvgCircle>();
            this._selected.Add(selected);
            await this.SelectedPad2Changed.InvokeAsync(this.SelectedPad2);
        }
    }

    private async Task Probe1ClickHandler(string id, SvgCircle area) {
        if (this.SelectedPad1 == area.AltTex) {
            this.SelectedPad1 = string.Empty;
            this._pad1Store = string.Empty;
            this._selected?.RemoveAll(e => e.AltTex == id);
            await this.SelectedPad1Changed.InvokeAsync(this.SelectedPad1);
        }else if (string.IsNullOrEmpty(this.SelectedPad1)) {
            this.SelectedPad1 = id;
            this._pad1Store = id;
            var selected = new SvgCircle { 
                Fill = this._probe1Fill, 
                Opacity = "100", 
                State = true,
                AltTex = area.AltTex,
                X = area.X,
                Y = area.Y,
                Radius = area.Radius
            };
            this._selected ??= new List<SvgCircle>();
            this._selected.Add(selected);
            await this.SelectedPad1Changed.InvokeAsync(this.SelectedPad1);
        } else {
            var previous=this._displayMap?.FirstOrDefault(e => e.AltTex == this.SelectedPad1);
            if(previous != null) {
                this._selected?.RemoveAll(e=>e.AltTex==previous.AltTex);
            }
            var selected = new SvgCircle { 
                Fill = this._probe1Fill, 
                Opacity = "100", 
                State = true,
                AltTex = area.AltTex,
                X = area.X,
                Y = area.Y,
                Radius = area.Radius
            };
            this._selected ??= new List<SvgCircle>();
            this._selected.Add(selected);
                    
            this.SelectedPad1 = id;
            this._pad1Store = id;
            await this.SelectedPad1Changed.InvokeAsync(this.SelectedPad1);
        }
    }

    private bool CanSelectPad(string id) {
        if(this.AvailablePads!=null) {
            if (this.AvailablePads.Contains(id)) {
                return !this.TestedPads?.Contains(id) ?? true;
            }
        }
        return false;
    }
    
    private void ScaleChanged(int scaleFactor) {
        this._scalingFactor = scaleFactor;
        this._height=this.WaferMap.ImageHeight+(50*scaleFactor);
        this._width=this.WaferMap.ImageWidth+(50*scaleFactor);
        this._dimensions = $"{this._height},{this._width}";
    }

    private Task Notify(NotificationSeverity severity, string summary, string message) {
        try {
            var notification=new NotificationMessage { 
                Severity = severity, 
                Summary = summary, 
                Detail = message, 
                Duration = 10000 };
            this.NotificationService.Notify(notification);
        }catch(Exception e) {
            this._logger.LogError("Notification Error: {Message}",e.ToErrorMessage());
        }
        return Task.CompletedTask;
    }

    public ValueTask DisposeAsync() {
        throw new NotImplementedException();
    }

}