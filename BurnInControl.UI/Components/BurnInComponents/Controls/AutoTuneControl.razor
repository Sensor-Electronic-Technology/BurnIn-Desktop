@using BurnInControl.Shared.ComDefinitions
@using BurnInControl.Shared.ComDefinitions.Station
@using BurnInControl.UI.Data
@inject NotifyPlotOptions NotifyPlotOptions
@rendermode InteractiveServer
<RadzenStack Orientation="Orientation.Vertical"
             JustifyContent="JustifyContent.Center"
             AlignItems="AlignItems.Center" Style="width: fit-content">
        <RadzenFieldset Text="Heater Controls" Style="width: fit-content;">
            <RadzenStack AlignItems="AlignItems.Center">
                <RadzenFormField Text="Switch Mode" Style="width: fit-content">
                    <RadzenButton Text="@this.GetTuneButtonText()"
                                  ButtonStyle="@this.GetModeStyle()"
                                  Click="@this.OnModeSwitchClick"
                                  Disabled="@this.TestRunning"
                                  Size="ButtonSize.Large"/>
                </RadzenFormField>
                <RadzenFormField Text="Toggle Temperature" Style="width:fit-content; height:fit-content;">
                    <RadzenButton Text="@(this.TemperatureSetPoint+"Â°C")"
                                  Style="height: 50px; font-size: x-large; width: 120px"
                                  ButtonStyle="@this.GetStyle()"
                                  Click="@this.TemperatureToggle"
                                  Disabled="@(!this.CanToggleTemp())"/>
                </RadzenFormField>
                <RadzenFieldset Text="Tuning Controls">
                    <RadzenStack>
                        <RadzenToggleButton Text="@this.GetStartStopButtonText()"
                                            Size="ButtonSize.Large"
                                            Value="@this.IsTuning"
                                            ButtonStyle="ButtonStyle.Info"
                                            ToggleButtonStyle="ButtonStyle.Secondary"
                                            Click="@StartPressedHandler"
                                            Disabled="@(!this.CanStartStop())"/>
                    </RadzenStack>
                </RadzenFieldset>
                <StationServiceControl Connect="@this.Connect"
                                       ServiceConnected="@this.ServiceConnected"
                                       UsbConnect="@this.UsbConnect"
                                       UsbConnected="@this.UsbConnected"/>
            </RadzenStack>
        </RadzenFieldset>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenFieldset Text="YAxis" Style="width: 100px;">
            <RadzenFormField Text="Min">
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.YAxisMin"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
            <RadzenFormField Text="Max">
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.YAxisMax"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
            <RadzenFormField Text="Step">
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.YAxisStep"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
        </RadzenFieldset>
        <RadzenFieldset Text="XAxis" Style="width: 100px;">
            <RadzenFormField Text="Min" >
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.XAxisMin"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
            <RadzenFormField Text="Max" >
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.XAxisMax"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
            <RadzenFormField Text="Step">
                <RadzenNumeric TValue="int"
                               @bind-Value="@this._plotOptions.XAxisStep"
                               Change="@(async () => { await this.Notify(); })"/>
            </RadzenFormField>
        </RadzenFieldset>
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter] public EventCallback<StationCommand> ModeSwPressed { get; set; }
    [Parameter] public EventCallback<StationCommand> StartPressed { get; set; }
    [Parameter] public EventCallback SavePressed { get; set; }
    [Parameter] public bool TestRunning { get; set; }
    [Parameter] public bool IsTuning { get; set; }
    [Parameter] public bool TuningFinished { get; set; }
    [Parameter] public StationHeaterMode Mode { get; set; }
    [Parameter] public bool UsbConnected { get; set; }
    [Parameter] public bool ServiceConnected { get; set; }
    
    [Parameter] public int TemperatureSetPoint { get; set; } =0;
    [Parameter] public EventCallback TemperatureToggle { get; set; }
    
    [Parameter] public EventCallback Connect { get; set; }
    [Parameter] public EventCallback UsbConnect { get; set; }
    [Parameter] public EventCallback Reset { get; set; }
    
    private bool _swButtonValue=false;
    private string _swButtonText="AutoTune";
    private bool _startStopButtonValue = false;
    private PlotAxisOptions _plotOptions=new PlotAxisOptions();
    
    private Task StartPressedHandler() {
        if (!this.IsTuning) {
            Console.WriteLine("Send Start Tune");
            return this.StartPressed.InvokeAsync(StationCommand.StartTune);
        } else {
            Console.WriteLine("Send Stop Tune");
            return this.StartPressed.InvokeAsync(StationCommand.StopTune);
        }
    }
    
    private Task Notify() {
        return NotifyPlotOptions.Set(_plotOptions);
    }

    private Task OnModeSwitchClick() {
        if(this.Mode==StationHeaterMode.TuningMode) {
            return this.ModeSwPressed.InvokeAsync(StationCommand.ChangeModeNormal);
        } else {
            return this.ModeSwPressed.InvokeAsync(StationCommand.ChangeModeATune);
        }
    }

    private string GetTuneButtonText() {
        if(this.Mode==StationHeaterMode.TuningMode) {
            return "Heating";
        } else {
            return "AutoTune";
        }
    }
    
    ButtonStyle GetStyle() {
        if (this.TemperatureSetPoint == 0) {
            return ButtonStyle.Light;
        }
        return ButtonStyle.Danger;
    }
    
    ButtonStyle GetModeStyle() {
        if (this.Mode==StationHeaterMode.TuningMode) {
            return ButtonStyle.Primary;
        }
        return ButtonStyle.Secondary;
    }

    private string GetStartStopButtonText() {
        return this.IsTuning ? "Stop":"Start";
    }

    private bool CanStartStop() {
        return !this.TestRunning && this.Mode==StationHeaterMode.TuningMode;
    }

    private bool CanCancel() {
        return this.IsTuning && !this.TestRunning && this.Mode == StationHeaterMode.TuningMode;
    }

    private bool CanSave() {
        return this.TuningFinished && !this.TestRunning && this.Mode==StationHeaterMode.TuningMode;
    }

    private bool CanDiscard() {
        return this.TuningFinished && !this.TestRunning && this.Mode==StationHeaterMode.TuningMode;
    }

    private bool CanToggleTemp() {
        return this.Mode == StationHeaterMode.HeatingMode && !this.TestRunning;
    }

}