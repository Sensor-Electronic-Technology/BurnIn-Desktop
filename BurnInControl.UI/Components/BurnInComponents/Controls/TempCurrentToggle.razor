@rendermode InteractiveServer
<RadzenStack Orientation="Orientation.Vertical">
    <RadzenFormField Text="Cycle Current" Style="width:fit-content; height:fit-content;">
        <RadzenButton Text="@(this.CurrentSetPoint+"mA")" 
                      Click="@this.CurrentCycle"
                      Style="width: 120px; height: 50px; font-size: x-large"
                      ButtonStyle="ButtonStyle.Info"
                      Disabled="@(!this.Enabled)"/>
    </RadzenFormField>
    <RadzenFormField Text="Toggle Temperature" Style="width:fit-content; height:fit-content;">
        <RadzenButton Text="@(this.TemperatureSetPoint+"Â°C")"
                      IsBusy="@this._isBusy"
                      Style="height: 50px; font-size: x-large; width: 120px"
                      ButtonStyle="@this.GetStyle()"
                      Click="@this.TemperatureToggle"
                      Disabled="@(!this.Enabled)"/>
    </RadzenFormField>
</RadzenStack>
@code {
    [Parameter] public int CurrentSetPoint { get; set; } = 0;
    [Parameter] public EventCallback CurrentCycle { get; set; }
    [Parameter] public int TemperatureSetPoint { get; set; } =0;
    [Parameter] public EventCallback TemperatureToggle { get; set; }
    [Parameter] public bool Enabled { get; set; } = false;

    private int _setTemp = 0;
    private bool _isBusy = false;

    protected override Task OnParametersSetAsync() {
        return base.OnParametersSetAsync();
    }
    
    ButtonStyle GetStyle() {
        if (this.TemperatureSetPoint == 0) {
            return ButtonStyle.Light;
        }
        return ButtonStyle.Danger;
    }

}