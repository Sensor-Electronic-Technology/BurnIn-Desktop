@using BurnInControl.Data.StationModel.Components
@inject DialogService DialogService
@implements IAsyncDisposable
<RadzenStack Gap="10" Style="margin: .6rem" 
             AlignItems="AlignItems.Center">
    <RadzenText Text="Station Control" 
                TextAlign="TextAlign.Center" 
                TextStyle="TextStyle.DisplayH6" 
                Style="margin: .6rem" />
    <RadzenStack AlignItems="AlignItems.Center" 
                 Orientation="Orientation.Vertical" 
                 Gap="10">
        <RadzenFieldset Text="Test Control">
            <RadzenStack>
                <RadzenToggleButton Text="@this._runButtonText" 
                                    Value="@this.Running"
                                    ButtonStyle="ButtonStyle.Success"
                                    ToggleButtonStyle="ButtonStyle.Info"
                                    Click="@this.OnStartClicked"
                                    Disabled="@(!this.CanStartPauseReset())"
                                    Size="ButtonSize.Large" Style="width: 170px"/>
                <RadzenToggleButton Text="Reset"
                                    ButtonStyle="ButtonStyle.Danger"
                                    Size="ButtonSize.Large"
                                    ToggleButtonStyle="ButtonStyle.Danger"
                                    Click="@this.OnResetClicked"
                                    Disabled="@(!this.CanStartPauseReset())"
                                    ToggleShade="Shade.Dark" Style="width: 170px"/>
                <RadzenToggleButton Text="Probe Test"
                                    BusyText="Probe Test Running"
                                    IsBusy="@this._probeTestRunning"
                                    ToggleButtonStyle="ButtonStyle.Warning"
                                    ButtonStyle="ButtonStyle.Secondary"
                                    Size="ButtonSize.Large"
                                    Disabled="@(!this.CanProbeTest())"
                                    Click="@this.ProbeTestClickedHandler"
                                    Value="@this._probeTestRunning"
                                    ToggleShade="Shade.Dark" Style="width: 170px"/>
            </RadzenStack>
        </RadzenFieldset>
    </RadzenStack>
    <StationServiceControl ServiceConnected="@this.ServiceConnected"
                           UsbConnected="@this.UsbConnected"
                           Connect="@this.Connect"
                           UsbConnect="@this.UsbConnect"
                            RestartService="@this.RestartService"
                           UsbVisible="true"/>
</RadzenStack>
@code{
    [Parameter] public EventCallback Connect { get; set; }
    [Parameter] public EventCallback UsbConnect { get; set; }
    [Parameter] public EventCallback RestartService { get; set; }
    
    [Parameter] public EventCallback StartPause { get; set; }
    [Parameter] public EventCallback Reset { get; set; }
    [Parameter] public EventCallback ProbeTest { get; set; }
    
    
    [Parameter] public EventCallback<StationCurrent> CurrentChanged { get; set; }
    [Parameter] public EventCallback<double> TempChanged { get; set; }
    [Parameter] public EventCallback<(int current,int temp)> Upload { get; set; }
    [Parameter] public int SetCurrent { get; set; } = StationCurrent._150mA.Value;
    [Parameter] public int SetTemperature { get; set; } = 85;
    [Parameter] public bool UsbConnected { get; set; }
    [Parameter] public bool ServiceConnected { get; set; }
    [Parameter] public bool Paused { get; set; }
    [Parameter] public bool Running { get; set; }
    [Parameter] public bool ProbeTestRunning { get; set; }
    
    
    private bool _serviceConnectBtnBusy = false;
    private bool _usbBtnBusy = false;
    private bool _testBtnBusy = false;
    private bool _testBtnValue = false;

    private string _runButtonText="Start";
    private bool _running = false;
    private bool _paused = false;
    private bool _probeTestRunning = false;

    protected override Task OnParametersSetAsync() {
        if (this.Running) {
            this._running = this.Running;
                this._paused = this.Paused;
                this._runButtonText = this.Paused ? "Continue" : "Pause";
        } else {
            this._running=this.Running;
            this._paused = this.Paused;
            this._runButtonText = "Start";
        }

        this._probeTestRunning = this.ProbeTestRunning;
        return base.OnParametersSetAsync();
    }

    private Task OnStartClicked() {
        if (this._running) {
            this._paused = !this._paused;
            this._runButtonText = this._paused ? "Continue" : "Pause";
        }
        return this.StartPause.InvokeAsync();
    }

    private bool CanStartPauseReset() {
        return !this._probeTestRunning && this.ServiceConnected;
    }

    private bool CanProbeTest() {
        return !this._running && this.ServiceConnected;
    }

    private async Task OnResetClicked() {
        if (this._running) {
            var cont=await DialogService.Confirm("Are you sure you want to reset? " +
                                                 "This will clear the running test on the controller", 
                "Warning Test Running", new ConfirmOptions() {
                OkButtonText = "Continue Reset", CancelButtonText = "Cancel"
            });
            if (cont.HasValue) {
                if (cont.Value) {
                    await this.Reset.InvokeAsync();
                }   
            }
        } else {
            await this.Reset.InvokeAsync();
        }
    }
    
    public ValueTask DisposeAsync() {
        return ValueTask.CompletedTask;
    }

    private Task ProbeTestClickedHandler() {
        this._probeTestRunning = true;
        return this.ProbeTest.InvokeAsync();
    }

    private void OnUploadCurrentTemp((int current, int temperature) obj) {
        this.Upload.InvokeAsync((obj.current,obj.temperature));
    }
}