@inject IJSRuntime jsRuntime

<RadzenRow Style="margin: 1rem; height: 300px; width: 600px;">
    @*<BlazorMergelyComponent @ref="BlazorMergelyComponentInstance" MergelyOptions="@MergelyOptions" />*@
    <Monaco href="@_monaco" Value="@this.ServerConfig" OtherValue="@this.ControllerConfig" Language="json"/>
</RadzenRow>



@code {
    /*private BlazorMergelyComponent? BlazorMergelyComponentInstance { get; set; } = new BlazorMergelyComponent();*/
    /*private string MergelyOptions { get; set; } = "{\"cmsettings\":{\"mode\":\"text/json\",\"readOnly\":false,\"styleSelectedText\": true}}"; // This is optional*/
    Monaco _monaco;

    [Parameter] public string ServerConfig { get; set; } = "";
    [Parameter] public string ControllerConfig { get; set; } = "";
    
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
		
        // Component reference is set after the first render
        if(firstRender) {
            /*await BlazorMergelyComponentInstance!.SetValueAsync(this.ServerConfig, this.ControllerConfig);*/
        }
    }

    protected override async Task OnParametersSetAsync() {
        /*switch (ServerConfig) {
            case HeaterControllerConfig heaterControllerConfig: {
                this._serverConfigJson=JsonSerializer.Serialize(heaterControllerConfig,new JsonSerializerOptions() {
                    WriteIndented = true
                });
                break;
            }
            case ProbeControllerConfig probeControllerConfig: {
                this._serverConfigJson=JsonSerializer.Serialize(probeControllerConfig, 
                    new JsonSerializerOptions() { WriteIndented = true });
                break;
            }
            case StationConfiguration stationConfiguration: {
                this._serverConfigJson=JsonSerializer.Serialize(stationConfiguration, 
                    new JsonSerializerOptions() { WriteIndented = true });
                break;
            }
        }
        
        switch (ControllerConfig) {
            case HeaterControllerConfig heaterControllerConfig: {
                this._controllerConfigJson=JsonSerializer.Serialize(heaterControllerConfig,
                    new JsonSerializerOptions() {
                    WriteIndented = true
                });
                break;
            }
            case ProbeControllerConfig probeControllerConfig: {
                this._controllerConfigJson=JsonSerializer.Serialize(probeControllerConfig, 
                    new JsonSerializerOptions() { WriteIndented = true });
                break;
            }
            case StationConfiguration stationConfiguration: {
                this._controllerConfigJson=JsonSerializer.Serialize(stationConfiguration, 
                    new JsonSerializerOptions() { WriteIndented = true });
                break;
            }
        }*/
        //await BlazorMergelyComponentInstance!.SetValueAsync(this._serverConfigJson, this._controllerConfigJson);
    }
}