@using BurnInControl.Data.StationModel.Components
@using BurnInControl.Shared.ComDefinitions
@using BurnInControl.Shared.ComDefinitions.Station
@using BurnInControl.HubDefinitions.Hubs
@using Microsoft.AspNetCore.SignalR.Client
@using BurnInControl.Data.BurnInTests.Wafers
@using BurnInControl.HubDefinitions.HubTransports
@using BurnInControl.Shared
@using BurnInControl.Shared.ComDefinitions.Packets
@using Environment = System.Environment
@using BurnInControl.UI.Components.BurnInComponents.Controls.ControlPane
@using BurnInControl.UI.Data
@inject NotificationService NotificationService
@inject ILogger<StationView> _logger
@inject DialogService DialogService
@inject  StationStatusService StationStatusService
@inject  NavigationManager Navigation
@implements IAsyncDisposable
@rendermode InteractiveServer

<RadzenSplitter Orientation="Orientation.Horizontal">
    <RadzenSplitterPane Size="15%" Collapsed="@this._runtimePaneCollapsed">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="10" Style="margin: 10px">
            <TempCurrentToggle CurrentSetPoint="@this._data.CurrentSetPoint"
                               TemperatureSetPoint="@this._data.TemperatureSetPoint"
                               CurrentCycle="@this.CycleCurrentHandler"
                               TemperatureToggle="@this.ToggleTemperatureHandler"
                               Enabled="@this.CanToggleTemp()"/>
            <ElapsedView Elapsed="@this._data.ElapsedSeconds"
                         ProbeStates="@this._probeStates"
                         Running="@this._data.Running"/>
        </RadzenStack>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="70%" Collapsible="false">
        <RadzenSplitter Orientation="Orientation.Vertical" style=" border: 1px solid rgba(0,0,0,.08);">
            <RadzenSplitterPane Size="75%" Collapsible="false">
                <RadzenSplitter>
                    <RadzenTabs RenderMode="TabRenderMode.Client"
                                SelectedIndexChanged="SelectedTabChangedHandler" Style="width: 100%; height: 100%">
                        <Tabs>
                            <RadzenTabsItem Text="Live" Selected="true">
                                <StationDisplays Voltages="@this._data.Voltages"
                                                 Currents="@this._data.Currents"
                                                 Temps="@this._data.Temperatures"
                                                 TempStates="@this._data.HeaterStates"/>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Test Setup">
                                <TestSetup Save="@this.SaveTestSetupHandler" 
                                           CancelCallback="@this.CancelTestSetupHandler"
                                           TestRunning="@this._testRunning"/>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Plots">
                                @*<LivePlots/>*@
                                <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenText TextStyle="TextStyle.H4" Text="Coming Soon...."/>
                                </RadzenRow>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                </RadzenSplitter>
            </RadzenSplitterPane>
            <RadzenSplitterPane Size="25%"
                                Resizable="true"
                                Collapsed="@this._eventPaneCollapsed">
                <RadzenSplitter>
                    <RadzenSplitterPane>
                        <EventConsole @ref="@this._eventConsole"
                                      LogTitle="Station Log"/>
                    </RadzenSplitterPane>
                </RadzenSplitter>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="15%" Resizable="true" Collapsed="@this._controlPaneCollapsed">
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <StationControl Connect="@this.OnConnectClicked"
                            Reset="@this.OnResetClicked"
                            StartPause="@this.OnStartClicked"
                            CurrentChanged="CurrentChangedHandler"
                            UsbConnect="@this.OnUsbConnectClicked"
                            TempChanged="@this.TempChangedHandler"
                            ServiceConnected="@this.Connected"
                            UsbConnected="@this._usbConnected"
                            Paused="@this._data.Paused"
                            Running="@this._data.Running"
                            ProbeTestRunning="@this._probeTestRunning"
                            RestartService="@this.RestartServiceHandler"
                            ProbeTest="@this.ProbeTestClicked"/>
        </RadzenRow>
    </RadzenSplitterPane>
</RadzenSplitter>

@code {
    
    [Inject] HubClient HubClient { get; set; }
    private EventConsole _eventConsole = new EventConsole();
    private StationSerialData _data = new();
    private IDisposable? _navigationRegistration;
    private bool Connected => this.HubClient.StationHubIsConnected;
    private bool _usbConnected = false;
    private List<PocketWaferSetup>? _waferSetups = new List<PocketWaferSetup>();
    private bool _eventPaneCollapsed = false;
    private bool _controlPaneCollapsed = false;
    private bool _runtimePaneCollapsed = false;
    private bool _probeTestRunning = false;
    private bool _testRunning = false;
    private bool _testPaused = false;

    private List<ProbeState> _probeStates =
        [new ProbeState() { RunTime = 0, RunTimeOkay = false }, 
            new ProbeState() { RunTime = 0, RunTimeOkay = false }, 
            new ProbeState() { RunTime = 0, RunTimeOkay = false }, 
            new ProbeState() { RunTime = 0, RunTimeOkay = false }, 
            new ProbeState() { RunTime = 0, RunTimeOkay = false }, 
            new ProbeState() { RunTime = 0, RunTimeOkay = false }];

    private bool CanToggleTemp() {
        return !this._testRunning & this.Connected;
    }
    
    #region UIMethods

    protected override async Task OnInitializedAsync() {
        this.HubClient.StationHubConnection.On<StationSerialData>(StationHubConstants.Events.OnStationData, this.OnSerialComReceived);
        this.HubClient.StationHubConnection.On<int, string>(StationHubConstants.Events.OnSerialComMessage, this.OnSerialComMessageReceived);
        this.HubClient.StationHubConnection.On<string>(StationHubConstants.Events.OnUsbDisconnect, this.UsbDisconnectedHandler);
        this.HubClient.StationHubConnection.On<string>(StationHubConstants.Events.OnUsbConnectFailed, this.UsbConnectFailedHandler);
        this.HubClient.StationHubConnection.On<string>(StationHubConstants.Events.OnUsbConnect, this.UsbConnectHandler);
        this.HubClient.StationHubConnection.On<bool>(StationHubConstants.Events.OnStationConnection, this.OnStationConnection);
        this.HubClient.StationHubConnection.On<string>(StationHubConstants.Events.OnTestStarted, this.OnTestStartedHandler);
        this.HubClient.StationHubConnection.On<string>(StationHubConstants.Events.OnTestStartedFailed, this.OnTestStartedFailedHandler);
        this.HubClient.StationHubConnection.On<LoadTestSetupTransport>(StationHubConstants.Events.OnTestStartedFrom, this.OnTestStartedFromHandler);
        this.HubClient.StationHubConnection.On<LoadTestSetupTransport>(StationHubConstants.Events.OnTestStartedFromUnknown, this.OnTestStartedFromHandler);
        this.HubClient.StationHubConnection.On<bool, string>(StationHubConstants.Events.OnTestSetup, this.OnTestSetupHandler);
        this.HubClient.StationHubConnection.On<string>(StationHubConstants.Events.OnTestCompleted, this.OnTestCompletedHandler);
        this.HubClient.StationHubConnection.On(StationHubConstants.Events.OnProbeTestDone, this.OnProbeTestDoneHandler);
        this.HubClient.StationHubConnection.On<LoadTestSetupTransport>(StationHubConstants.Events.OnRequestRunningTest, this.OnRequestRunningTestHandler);
        this.HubClient.StationHubConnection.On<string>(StationHubConstants.Events.OnUpdateStart,this.UpdateStarting);
        this.HubClient.StationHubConnection.On(StationHubConstants.Events.OnFirmwareUpdateStart,this.FirmwareUpdateStarting);
        this.HubClient.StationHubConnection.On<bool, string>(StationHubConstants.Events.OnUpdateComplete,this.FirmwareUpdateComplete);
    }
    
    protected override Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            this._navigationRegistration = this.Navigation.RegisterLocationChangingHandler(this.OnLocationChanging);
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async ValueTask OnLocationChanging(LocationChangingContext context) {
        switch (this.StationStatusService.StationState) {
            case StationState.Running:
            case StationState.Paused: {
                var cont=await DialogService.Confirm("Test running, if you navigate p " +
                                                     "This will clear the running test on the controller",
                    "Warning Test Running", new ConfirmOptions() {
                        OkButtonText = "Continue Reset", CancelButtonText = "Cancel"
                    });
                if (cont.HasValue) {
                    if (!cont.Value) {
                        context.PreventNavigation();
                    }
                }

                break;
            }
        }
    }

    public async ValueTask DisposeAsync() {
        this._navigationRegistration?.Dispose();
    }

    #endregion

    #region HubHandlers
    
    private async Task UpdateStarting(string message) {
        InvokeAsync(async () => {
            await Task.Delay(10000);
            this.DialogService.Close();
            await this.HubClient.HostHubConnection.SendAsync(HostHubConstants.Methods.RestartBrowser);
        });
        await UpdateDialog("Updating... Window will close, please reopen once completed");
    }

    private async Task FirmwareUpdateStarting() {
        await UpdateDialog("Firmware update starting. This will take a moment, please wait...");
    }
    
    private Task FirmwareUpdateComplete(bool success, string message) {
        DialogService.Close();
       if (success) {
            this.Notify("Firmware Update Complete", message, NotificationSeverity.Success);
        } else {
            this.Notify("Firmware Update Failed", message, NotificationSeverity.Error);
        }
        return Task.CompletedTask;
    }
    
    private async Task UpdateDialog(string message) {
        await DialogService.OpenAsync("", ds =>
            @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
                <RadzenImage Path="images/update.png" Style="width: 400px;" AlternateText="update" />
                <RadzenText TextStyle="TextStyle.H5" Text="@message"/>
            </RadzenStack>, new DialogOptions() {
            ShowTitle = false, 
            Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = true,
            ShowClose = true
        });
    }

    private void UsbConnectHandler(string message) {
        this.Notify("Usb Connected", "Usb Connected", NotificationSeverity.Success);
        this._eventConsole.Log(message, AlertStyle.Info);
    }

    private Task UsbDisconnectedHandler(string message) {
        this.Notify("Usb Disconnected", "Usb Disconnected", NotificationSeverity.Warning);
        this._eventConsole.Log(message, AlertStyle.Danger);
        return Task.CompletedTask;
    }

    private void UsbConnectFailedHandler(string message) {
        this.Notify("Usb Failed To Connect", message, NotificationSeverity.Error, 10000);
        this._eventConsole.Log(message, AlertStyle.Danger);
    }

    private Task OnSerialComReceived(StationSerialData data) {
        this._data = data;
        this._testRunning = data.Running;
        this._testPaused = data.Paused;
        for (int i = 0; i < ControllerHardwareConstants.PROBE_COUNT; i++) {
            this._probeStates[i].RunTime = data.ProbeRuntimes[i];
            this._probeStates[i].RunTimeOkay = data.ProbeRunTimeOkay[i];
        }
        return InvokeAsync(StateHasChanged);
    }

    private Task OnSerialComMessageReceived(int type, string message) {
        StationMessageType messageType = (StationMessageType)type;
        switch (messageType) {
            case StationMessageType.GENERAL: {
                this._eventConsole.Log(message, AlertStyle.Info);
                break;
            }
            case StationMessageType.INIT: {
                this._eventConsole.Log(message, AlertStyle.Secondary);
                break;
            }
            case StationMessageType.NOTIFY: {
                this.Notify("Station Notify", message, NotificationSeverity.Info);
                break;
            }
            case StationMessageType.ERROR: {
                this.Notify("Station Error", message, NotificationSeverity.Error);
                break;
            }
        }

        return Task.CompletedTask;
    }

    private Task OnStationConnection(bool usbStatus) {
        this._usbConnected = usbStatus;
        return Task.CompletedTask;
    }

    private Task OnTestSetupHandler(bool success, string message) {
        if (success) {
            this.Notify("Test Setup Complete", message, NotificationSeverity.Success);
        } else {
            this.Notify("Test Setup Failed", message, NotificationSeverity.Error);
        }

        return Task.CompletedTask;
    }

    private Task OnTestStartedHandler(string message) {
        this.StationStatusService.StationState = StationState.Running;
        this.Notify("Test Started", message, NotificationSeverity.Success);
        return Task.CompletedTask;
    }

    private Task OnTestStartedFailedHandler(string message) {
        this.StationStatusService.StationState = StationState.Idle;
        this.Notify("Test Failed To Start", message, NotificationSeverity.Success);
        return Task.CompletedTask;
    }

    private Task OnTestCompletedHandler(string message) {
        this.StationStatusService.StationState = StationState.Idle;
        this.Notify("Test Completed", message, NotificationSeverity.Success);
        return Task.CompletedTask;
    }

    private Task OnProbeTestDoneHandler() {
        this._probeTestRunning = false;
        this.Notify("Probe Test", "Probe Test Completed", NotificationSeverity.Info);
        return Task.CompletedTask;
    }

    private Task OnTestStartedFromUnknownHandler(LoadTestSetupTransport transport) {
        if (transport.Success) {
            this.StationStatusService.StationState = StationState.Running;
            this.StationStatusService.TestSetup = transport.PocketWaferSetups ?? [];
            this.Notify("Unknown Test Started From Memory", transport.Message ?? "No Message", NotificationSeverity.Success);
        } else {
            this.Notify("Unknown Test Failed to Started ", transport.Message ?? "No Message", NotificationSeverity.Error);
        }

        return Task.CompletedTask;
    }

    private Task OnRequestRunningTestHandler(LoadTestSetupTransport transport) {
        if (transport.Success) {
            this.StationStatusService.StationState = StationState.Running;
            this.StationStatusService.TestSetup = transport.PocketWaferSetups ?? [];
            this.Notify("Test Running", transport.Message ?? "No Message", NotificationSeverity.Success);
        } else {
            this.Notify("Request Running Test Failed", transport.Message ?? "No Message", NotificationSeverity.Error);
        }

        return Task.CompletedTask;
    }

    private Task OnTestStartedFromHandler(LoadTestSetupTransport transport) {
        if (transport.Success) {
            this.StationStatusService.StationState = StationState.Running;
            this.StationStatusService.TestSetup = transport.PocketWaferSetups ?? [];
            this.Notify("Test Started", transport.Message ?? "No Message", NotificationSeverity.Success);
        } else {
            this.Notify("Test Failed To Start ", transport.Message ?? "No Message", NotificationSeverity.Error);
        }

        return Task.CompletedTask;
    }

    private Task StationHubConnectionOnOnHubConnected(Boolean stat, String arg) {
        if (stat) {
            this.Notify("Station Service Connected", arg, NotificationSeverity.Success);
        } else {
            this.Notify("Station Service Connection Failed", arg, NotificationSeverity.Error);
        }

        return Task.CompletedTask;
    }

    #endregion

    #region UIHandlers

    #region ButtonHandlers
    
    private async Task RestartServiceHandler() {
        if (this.HubClient.HostHubIsConnected) {
             await this.HubClient.StationHubConnection.SendAsync(HostHubConstants.Methods.RestartService);
             await this.DialogService.Alert("Restarting service. The browser will close shortly, please reopen once it does", "Service Restart"); 
        }
        this.NotifyNotConnected();
    }

    private Task ToggleTemperatureHandler() {
        if (this.Connected) {
            if (!this._data.Running) {
                this.StationStatusService.StationState=this._data.TemperatureSetPoint==0 ? StationState.Heating : StationState.Idle;
                return this.HubClient.StationHubConnection.SendAsync(StationHubConstants.Methods.SendCommand, StationCommand.ToggleHeat);
            }
        }

        this.NotifyNotConnected();
        return Task.CompletedTask;
    }

    private Task CycleCurrentHandler() {
        if (this.Connected) {
            return this.HubClient.StationHubConnection.SendAsync(StationHubConstants.Methods.SendCommand, StationCommand.CycleCurrent);
        }

        this.NotifyNotConnected();
        return Task.CompletedTask;
    }

    private Task SaveTestSetupHandler(List<PocketWaferSetup> waferSetups) {
        if (this.Connected) {
            if (!waferSetups.Any()) {
                this.Notify("Setup Error",
                    "No wafer setups. There must be at least one wafer loaded to start a test",
                    NotificationSeverity.Error);
                return Task.CompletedTask;
            }
            if (StationCurrent.TryFromValue(this._data.CurrentSetPoint, out var current)) {
                return this.HubClient.StationHubConnection.SendAsync(StationHubConstants.Methods.SetupTest, 
                    new TestSetupTransport() {
                        WaferSetups = waferSetups, 
                        SetCurrent = current, 
                        SetTemperature = 85,
                });
            }
            this.Notify("Invalid Current",
                "Failed to retrieve set current, please cycle current and try again",
                NotificationSeverity.Error);
            return Task.CompletedTask;
        }

        this.NotifyNotConnected();
        return Task.CompletedTask;
    }

    private Task OnStartClicked() {
        if (this.Connected) {
            if (this._data.Running) {
                var command = this._data.Paused ? StationCommand.Continue : StationCommand.Pause;
                this._testPaused = !this._data.Paused;
                this.StationStatusService.StationState= this._testPaused ? StationState.Paused : StationState.Running;
                return this.HubClient.StationHubConnection.SendAsync(StationHubConstants.Methods.SendCommand, command);
            } else {
                var command = StationCommand.Start;
                this._testRunning = true;
                return this.HubClient.StationHubConnection.SendAsync(StationHubConstants.Methods.SendCommand, command);
            }
        }

        this.NotifyNotConnected();
        return Task.CompletedTask;
    }

    private Task OnResetClicked() {
        if (this.Connected) {
            this._eventConsole.Log("Reset Clicked", AlertStyle.Warning);
            this.StationStatusService.StationState = StationState.Idle;
            this._testRunning = false;
            this._testPaused = false;
            return this.HubClient.StationHubConnection.SendAsync(StationHubConstants.Methods.SendCommand, StationCommand.Reset);
        }

        this.NotifyNotConnected();
        return Task.CompletedTask;
    }

    private Task CancelTestSetupHandler() {
        if (this.Connected) {
            this._eventConsole.Log("Canceling Test Setup and Resetting Controller", AlertStyle.Warning);
            this.StationStatusService.StationState = StationState.Idle;
            this._testRunning = false;
            this._testPaused = false;
            return this.HubClient.StationHubConnection.SendAsync(StationHubConstants.Methods.SendCommand, StationCommand.Reset);
        }
        this.NotifyNotConnected();
        return Task.CompletedTask;
    }

    private Task ProbeTestClicked() {
        if (this.Connected) {
            this._probeTestRunning = true;
            return this.HubClient.StationHubConnection.SendAsync(StationHubConstants.Methods.SendCommand, StationCommand.ProbeTest);
        }

        this.NotifyNotConnected();
        return Task.CompletedTask;
    }

    private Task OnConnectClicked() {
        if (this.Connected) {
            this._eventConsole.Log("Disconnect Clicked", AlertStyle.Warning);
            this.StationStatusService.StationState = StationState.Offline;
            return this.HubClient.StopAsync();
        } else {
            this.StationStatusService.StationState = StationState.Idle;
            this._eventConsole.Log("Connect Clicked", AlertStyle.Success);
            //return this.StartConnection();
            return this.HubClient.StartAsync();
        }
    }

    private Task OnUsbConnectClicked() {
        if (this.Connected) {
            if (this._usbConnected) {
                this._eventConsole.Log("Usb Disconnect Clicked", AlertStyle.Warning);
                return this.HubClient.StationHubConnection.InvokeAsync(StationHubConstants.Methods.ConnectUsb);
            } else {
                this._eventConsole.Log("Usb Connect Clicked", AlertStyle.Info);
                return this.HubClient.StationHubConnection.InvokeAsync(StationHubConstants.Methods.ConnectUsb);
            }
        }

        this.NotifyNotConnected();
        return Task.CompletedTask;
    }

    #endregion

    private void SelectedTabChangedHandler(int tabIndex) {
        if (tabIndex != 0) {
            if (tabIndex == 1) {
                this._controlPaneCollapsed = true;
                this._runtimePaneCollapsed = true;
                this._eventPaneCollapsed = true;
            } else {
                this._controlPaneCollapsed = true;
                this._runtimePaneCollapsed = true;
            }
        } else {
            this._controlPaneCollapsed = false;
            this._runtimePaneCollapsed = false;
            this._eventPaneCollapsed = false;
        }
        //this._eventConsole.Log($"Tab Changed {tabIndex}",AlertStyle.Info);
    }

    private async Task CurrentChangedHandler(StationCurrent stationCurrent) {
        this._eventConsole.Log($"Current Selection Changed.  Value {stationCurrent.Name}", AlertStyle.Danger);
    }

    private async Task TempChangedHandler(double temp) {
        this._eventConsole.Log($"Temp Value Changed.  Value {temp}", AlertStyle.Base);
    }

    #endregion

    #region NotifyMethods

    private void Notify(string summary, string message, NotificationSeverity severity = NotificationSeverity.Info, int duration = 5000) {
        try {
            var notification = new NotificationMessage { Severity = severity, Summary = summary, Detail = message, Duration = 10000 };
            this.NotificationService.Notify(notification);
        } catch (Exception e) {
            this._logger.LogError("Notification Error: {Message}", e.ToErrorMessage());
        }
    }

    private void NotifyNotConnected() {
        try {
            var notification = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Station Service Not Connected", Detail = "Cannot Send Command", Duration = 10000 };
            this.NotificationService.Notify(notification);
        } catch (Exception e) {
            this._logger.LogError("Notification Error: {Message}", e.ToErrorMessage());
        }
    }

    #endregion



}