@using Amazon.Runtime.Internal.Transform
@using BurnInControl.HubDefinitions.Hubs
@using BurnInControl.Shared
@using BurnInControl.Shared.ComDefinitions
@using BurnInControl.UI.Data
@using BurnInControl.UI.Components.BurnInComponents.Displays.Plots
@using Microsoft.AspNetCore.SignalR.Client
@inject ILogger<LivePlots> Logger
@inject HubClient HubClient
@rendermode InteractiveServer
<RadzenStack>
    <TemperaturePlot XAxisName="Time(hrs)"
                     YAxisName="Temperature(C)"
                     PlotAxisOptions="@_tempPlotOptions"
                     H1Data="@this._h1Data"
                     H2Data="@this._h2Data"
                     H3Data="@this._h3Data"
                     Running="_running"/>
    @*<VoltageLiveView VoltageData="_voltagePlotData"
                     XAxisName="Time(hrs)"
                     YAxisName="Voltage(V)"/>
    <CurrentLivePlot CurrentData="_currentPlotData"
                     XAxisName="Time(hrs)"
                     YAxisName="Current(mA)"/>*@
</RadzenStack>
@code {
    private StationSerialData? _data;
    private List<TemperatureLiveData>? _h1Data=new();
    private List<TemperatureLiveData>? _h2Data=new();
    private List<TemperatureLiveData>? _h3Data=new();

    private PlotAxisOptions _currentPlotOptions=new();
    private PlotAxisOptions _tempPlotOptions=new();
    private PlotAxisOptions _voltagePlotOptions = new();
    private TimeSpan _interval = new TimeSpan(0, 1, 0);
    private DateTime _last=DateTime.Now;

    private bool _running = false;

    protected override Task OnInitializedAsync() {
        this.HubClient.StationHubConnection.On<StationSerialData>(StationHubConstants.Events.OnStationData, this.OnSerialComReceived);
        this.InitPlotData();
        return base.OnInitializedAsync();
    }
    
    private async Task OnSerialComReceived(StationSerialData data) {
        this._data = data;
        if(this._running!=data.Running) {
            this.Logger.LogInformation("In OnSerialComReceived, Running Changed");
            this.InitPlotData();
            this.InitPlotOptions(data);
            this._running=data.Running;
            this._h1Data?.Add(new TemperatureLiveData() {
                TempC = data.Temperatures[0],
                TimeHrs = (double)data.ElapsedSeconds/60,
            });
            this._h2Data?.Add(new TemperatureLiveData() {
                TempC = data.Temperatures[1],
                TimeHrs = (double)data.ElapsedSeconds/60,
            });
            this._h3Data?.Add(new TemperatureLiveData() {
                TempC = data.Temperatures[2],
                TimeHrs = (double)data.ElapsedSeconds/60,
            });
        }
        if (data.Running) {
            Console.WriteLine($"Elapsed: Secs: {data.ElapsedSeconds} Hrs: {System.Math.Round((double)data.ElapsedSeconds/60,2)}");
            if ((DateTime.Now - this._last) >= this._interval) {
                this._last= DateTime.Now;
                this._h1Data?.Add(new TemperatureLiveData() {
                    TempC = data.Temperatures[0],
                    TimeHrs = (double)data.ElapsedSeconds/60,
                });
                this._h2Data?.Add(new TemperatureLiveData() {
                    TempC = data.Temperatures[1],
                    TimeHrs = (double)data.ElapsedSeconds/60,
                });
                this._h3Data?.Add(new TemperatureLiveData() {
                    TempC = data.Temperatures[2],
                    TimeHrs = (double)data.ElapsedSeconds/60,
                });
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private void InitPlotData() {
        this._h1Data= new List<TemperatureLiveData>();
        this._h2Data= new List<TemperatureLiveData>();
        this._h3Data= new List<TemperatureLiveData>();
    }
    
    private void InitPlotOptions(StationSerialData data) {
        
        this._currentPlotOptions.YAxisMax = data.CurrentSetPoint + 5;
        this._currentPlotOptions.YAxisMin = data.CurrentSetPoint - 5;
        this._currentPlotOptions.YAxisStep = 1;
        
        /*this._tempPlotOptions.XAxisMax=data.CurrentSetPoint==150 ? 420:1200;
        this._tempPlotOptions.XAxisMin = 0;
        this._tempPlotOptions.XAxisStep=data.CurrentSetPoint==150 ? 20:40;*/
        
        
        this._tempPlotOptions.YAxisMax = 90;
        this._tempPlotOptions.YAxisMin = 20;
        this._tempPlotOptions.YAxisStep = 10;
        
        /*this._tempPlotOptions.XAxisMax=20000;
        this._tempPlotOptions.XAxisMin = 0;
        this._tempPlotOptions.XAxisStep=1000;*/
        
        this._voltagePlotOptions.YAxisMax = 105;
        this._voltagePlotOptions.YAxisMin = 35;
        this._voltagePlotOptions.YAxisStep = 10;
        
        this._tempPlotOptions.XAxisMax=data.CurrentSetPoint==150 ? 420:1200;
        this._tempPlotOptions.XAxisMin = 0;
        this._tempPlotOptions.XAxisStep=data.CurrentSetPoint==150 ? 20:40;
    }

}