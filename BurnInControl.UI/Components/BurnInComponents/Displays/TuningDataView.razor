@using BurnInControl.UI.Data
@inject NotifyPlotOptions NotifyPlotOptions
@implements IAsyncDisposable
@rendermode InteractiveServer
<RadzenTabsItem Text="Plot">
    <RadzenStack Orientation="Orientation.Vertical" Gap="1">
        <HeaterDisplays Temperatures="@this.HeaterTemperatures"
                        HeaterStates="@this.HeaterStates"/>
        <RadzenChart Style="height: 400px;">
            <RadzenLineSeries Smooth="false"
                              Data="@H1Data"
                              CategoryProperty="TimeSecs"
                              Title="H1"
                              LineType="LineType.Solid"
                              ValueProperty="TempC">
                <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="false"/>
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="false"
                              Data="@H2Data"
                              CategoryProperty="TimeSecs"
                              Title="H2"
                              LineType="LineType.Solid"
                              ValueProperty="TempC">
                <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle"/>
                <RadzenSeriesDataLabels Visible="false"/>
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="false"
                              Data="@H3Data"
                              CategoryProperty="TimeSecs"
                              Title="H3"
                              LineType="LineType.Solid"
                              ValueProperty="TempC">
                <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle"/>
                <RadzenSeriesDataLabels Visible="false"/>
            </RadzenLineSeries>
            <RadzenCategoryAxis  Min="@this._plotAxisOptions.XAxisMin" 
                                 Max="@this._plotAxisOptions.XAxisMax" 
                                 Step="@this._plotAxisOptions.XAxisStep" 
                                 LineType="LineType.Solid">
                <RadzenAxisTitle Text="Time(s)"/>
                <RadzenGridLines Visible="true" StrokeWidth="3"/>
            </RadzenCategoryAxis>
            <RadzenValueAxis  Min="@this._plotAxisOptions.YAxisMin"
                              Max="@this._plotAxisOptions.YAxisMax"
                              Step="@this._plotAxisOptions.YAxisStep" >
                <RadzenGridLines Visible="true" StrokeWidth="3"/>
                <RadzenAxisTitle Text="Temperature(C)"/>
            </RadzenValueAxis>
        </RadzenChart>
    </RadzenStack>
</RadzenTabsItem>


@code {
    [Parameter] public List<TemperatureData> H1Data { get; set; }=new List<TemperatureData>();
    [Parameter] public List<TemperatureData> H2Data { get; set; }=new List<TemperatureData>();
    [Parameter] public List<TemperatureData> H3Data { get; set; }=new List<TemperatureData>();
    [Parameter] public List<double> HeaterTemperatures { get; set; }=[0,0,0];
    [Parameter] public List<bool> HeaterStates { get; set; } = [false,false,false];
    
    private PlotAxisOptions _plotAxisOptions = new PlotAxisOptions();

    protected override Task OnInitializedAsync() {
        this.NotifyPlotOptions.OnDataAvailable += NotifyPlotOptionsChangedHandler;
        return base.OnInitializedAsync();
    }

    private void NotifyPlotOptionsChangedHandler(PlotAxisOptions options) {
        this._plotAxisOptions = options;
        InvokeAsync(StateHasChanged);
    }

    public ValueTask DisposeAsync() {
        this.NotifyPlotOptions.OnDataAvailable -= NotifyPlotOptionsChangedHandler;
        return ValueTask.CompletedTask;
    }
}