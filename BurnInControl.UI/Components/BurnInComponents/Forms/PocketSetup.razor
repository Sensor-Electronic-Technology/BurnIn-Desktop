@using BurnInControl.Data.BurnInTests.Wafers
@using BurnInControl.Infrastructure.QuickTest
@using BurnInControl.Infrastructure.WaferTestLogs
@using BurnInControl.Shared
@using QuickTest.Data.DataTransfer
@using BurnInControl.UI.Components.BurnInComponents.Controls.ProbePads
@using BurnInControl.UI.Components.BurnInComponents.Controls.WaferMap
@using EpiData.Data.Models.Epi.Enums
@inject QuickTestDataService QuickTestDataService
@inject NotificationService NotificationService
@inject TestSetupService _testSetupService
@inject DialogService DialogService
@inject WaferTestLogDataService WaferTestLogDataService
@inject NotifyWaferIdChanged NotifyWaferIdChanged
@inject ILogger<TestSetup> _logger

 <RadzenStack Orientation="Orientation.Vertical" 
             AlignItems="AlignItems.Center" 
             JustifyContent="JustifyContent.Center" Gap="1">
    <RadzenText Text="@this.PocketCaption"/>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
            <RadzenFieldset Text="Wafer Size">
                <RadzenDropDown TValue="string"
                                Data="@this._waferSizes"
                                Value="@this._selectedWaferSize"
                                ValueChanged="@this.SelectedWaferSizeChanged"/>
            </RadzenFieldset>
            <WaferIdInput WaferId="@this.PocketWaferSetup.WaferId"
                          WaferList="@this.WaferList"
                          WaferIdChanged="@this.WaferIdChangedHandler"
                          ExistsChanged="ExistsChangedHandler"/>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="10">
                <RadzenFieldset Text="Pocket Loaded?">
                    <RadzenStack Orientation="Orientation.Vertical"
                                 AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenLabel Text="@(this.PocketWaferSetup.Loaded ? "Loaded" : "Not Loaded")" Component="Loaded"/>
                        <RadzenSwitch Value="@this.PocketWaferSetup.Loaded" ValueChanged="@this.LoadedChangedHandler" Name="Loaded"/>
                    </RadzenStack>
                </RadzenFieldset>
                <RadzenFieldset Text="Burn-in Number">
                    <RadzenNumeric TValue="int"
                                   Value="@this.PocketWaferSetup.BurnNumber"
                                   ValueChanged="@this.BurnInValueChanged"
                                   Style="width: 5rem"/>
                </RadzenFieldset>
            </RadzenStack>
            <PadSelectors Pads="@this._pads"
                          Enabled="@(this._exists && this.PocketWaferSetup.Loaded)"
                          Probe1Active="@this._probe1Active"
                          Probe1ActiveChanged="@((bool value) => this._probe1Active = value)"
                          Probe2Active="@this._probe2Active"
                          Probe2ActiveChanged="@((bool value) => this._probe2Active = value)"
                          Probe1Pad="@this.PocketWaferSetup.Probe1Pad"
                          Probe1PadChanged="@this.Probe1PadChangedHandler"
                          Probe2Pad="@this.PocketWaferSetup.Probe2Pad"
                          Probe2PadChanged="@this.Probe2PadChangedHandler"/>
        </RadzenStack>

        @if (this._waferMap == null) {
            <p><string>Please select a wafer size</string></p>
        } else {
            <WaferImageMap SelectedPad1="@this.PocketWaferSetup.Probe1Pad"
                           SelectedPad2="@this.PocketWaferSetup.Probe2Pad"
                           SelectedPad1Changed="@this.MapPad1ChangedHandler"
                           SelectedPad2Changed="@this.MapPad2ChangedHandler"
                           WaferMap="@this._waferMap"
                           AvailablePads="@this._pads"
                           Probe1Active="@this._probe1Active"
                           Probe2Active="@this._probe2Active"/>
        }

    </RadzenStack>
</RadzenStack>


@code {
    [Parameter] public string PocketCaption { get; set; } = "Pocket X";
    [Parameter] public PocketWaferSetup PocketWaferSetup { get; set; }=new PocketWaferSetup();
    [Parameter] public EventCallback<PocketWaferSetup> WaferSetupChanged { get; set; }
    [Parameter] public IEnumerable<string> WaferList { get; set; } = [];
    
    private bool _probe1Active=false;
    private bool _probe2Active=false;
    private List<string>? _pads;
    
    private bool _exists = false;
    
    private string? _selectedWaferSize;
    private IEnumerable<string> _waferSizes=[];
    private WaferMapDto? _waferMap = null;


    protected override async Task OnInitializedAsync() {
        this._probe1Active = false;
        this._probe2Active = false;
        this._waferSizes = new[] { WaferSize.TwoInch.Name, WaferSize.FourInch.Name };
        this._selectedWaferSize = WaferSize.TwoInch.Name;
        this._waferMap = await this.QuickTestDataService.GetWaferMap(WaferSize.TwoInch.Value);
    }

    private async Task CheckWaferExists() {
        if (!string.IsNullOrEmpty(this.PocketWaferSetup.WaferId)) {
            var result=await this.QuickTestDataService.QuickTestExists(this.PocketWaferSetup.WaferId);
            if (result.IsError) {
                await this.DialogService.Alert($"Error while checking wafer: {result.FirstError.Description}", "Error");
                this._exists = false;
            } else {
                this._exists = result.Value;
            }
        } else {
            this.Notify("Wafer ID is empty", "Please enter a wafer ID", NotificationSeverity.Warning);
        }
    }
    
    private async Task SelectedWaferSizeChanged(string waferSize) {
        this._selectedWaferSize=waferSize;
        var size=WaferSize.FromName(waferSize);
        this._waferMap = null;
        await InvokeAsync(StateHasChanged);
        this._waferMap=await this.QuickTestDataService.GetWaferMap(size.Value);
        this._pads = null;
        this.PocketWaferSetup.Probe1Pad = string.Empty;
        this.PocketWaferSetup.Probe2Pad = string.Empty;
        this.PocketWaferSetup.WaferSize = size.Value;
        this._probe1Active = false;
        this._probe2Active = false;
        await this.WaferSetupChanged.InvokeAsync(this.PocketWaferSetup);
        await InvokeAsync(StateHasChanged);
    }
    
    private void WaferIdChangedHandler(string waferId) {
        this.PocketWaferSetup.WaferId = waferId;
        this.WaferSetupChanged.InvokeAsync(this.PocketWaferSetup);
    }

    private async Task Probe1PadChangedHandler(object obj) {
        var selected=obj as string;
        this.PocketWaferSetup.Probe1Pad = selected; 
        await this.WaferSetupChanged.InvokeAsync(this.PocketWaferSetup);
    }
    
    private Task Probe2PadChangedHandler(object obj) {
        var selected=obj as string;
        this.PocketWaferSetup.Probe2Pad = selected;
        return this.WaferSetupChanged.InvokeAsync(this.PocketWaferSetup);
    }

    private Task MapPad1ChangedHandler(string pad) {
        this.PocketWaferSetup.Probe1Pad = pad;
        return this.WaferSetupChanged.InvokeAsync(this.PocketWaferSetup);
    }
    
    private Task MapPad2ChangedHandler(string pad) {
        this.PocketWaferSetup.Probe2Pad = pad;
        return this.WaferSetupChanged.InvokeAsync(this.PocketWaferSetup);
    }

    private Task LoadedChangedHandler(bool value) {
       this.PocketWaferSetup.Loaded= value;
       return this.WaferSetupChanged.InvokeAsync(this.PocketWaferSetup);
    }

    private Task BurnInValueChanged(int burnNumber) {
        this.PocketWaferSetup.BurnNumber=burnNumber;
        return this.WaferSetupChanged.InvokeAsync(this.PocketWaferSetup);
    }
    
    private void Notify(string summary,string message,NotificationSeverity severity=NotificationSeverity.Info,int duration=5000) {
        try {
            var notification=new NotificationMessage { 
                Severity = severity, 
                Summary = summary, 
                Detail = message, 
                Duration = 10000 };
            this.NotificationService.Notify(notification);
        }catch(Exception e) {
            this._logger.LogError("Notification Error: {Message}",e.ToErrorMessage());
        }
    }

    private void NotifyNotConnected() {
        try {
            var notification=new NotificationMessage {
                Severity = NotificationSeverity.Error, 
                Summary = "Station Service Not Connected", 
                Detail = "Cannot Send Command", 
                Duration = 10000 };
            this.NotificationService.Notify(notification);
        }catch(Exception e) {
            this._logger.LogError("Notification Error: {Message}",e.ToErrorMessage());
        }
    }

    private async Task ExistsChangedHandler(bool waferExists) {
        if (this._exists == true && waferExists == false) {
            this.PocketWaferSetup.Probe1Pad = string.Empty;
            this.PocketWaferSetup.Probe2Pad= string.Empty;
            this._probe1Active = false;
            this._probe2Active = false;
            this._waferMap = null;
            this._pads = null;
            await InvokeAsync(StateHasChanged);
            this._waferMap=await this.QuickTestDataService.GetWaferMap(WaferSize.TwoInch.Value);
            await InvokeAsync(StateHasChanged);
        }
        this._exists= waferExists;
        if (waferExists) {
            /*this._waferMap = null;*/
            /*this._pads = null;*/
            /*await InvokeAsync(StateHasChanged);*/
            this._waferMap=await this.QuickTestDataService.GetWaferMap(WaferSize.TwoInch.Value);
            var pads= await this.QuickTestDataService.GetAvailablePads(this.PocketWaferSetup.WaferId);
            this._pads = pads.Distinct().ToList();
            var testPads=await this.WaferTestLogDataService.GetTestedPads(this.PocketWaferSetup.WaferId);
            if (testPads.Any()) {
                this._pads.RemoveAll(e => testPads.Contains(e));
            }
            //await this.NotifyWaferIdChanged.Notify();
            //await InvokeAsync(StateHasChanged);
            
        }
    }

}