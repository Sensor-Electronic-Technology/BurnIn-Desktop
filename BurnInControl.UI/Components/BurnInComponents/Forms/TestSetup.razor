@using BurnInControl.Data.BurnInTests.Wafers
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TestSetupService TestSetupService
@inject StationStatusService StationStatusService
@inject TooltipService ToolTipService
@implements IAsyncDisposable
@rendermode InteractiveServer

<RadzenSplitter Orientation="Orientation.Horizontal">
    <RadzenSplitterPane Size="40%">
        <RadzenStack Orientation="Orientation.Vertical" 
                     Style="border: 1px solid #0a53be; margin: 0.3rem;" readonly="@this.TestRunning">
            <RadzenDataGrid @ref="@this._waferSetupGrid"
                            TItem="WaferSetup"
                            Data="@this.TestSetupService.WaferSetups"
                            Density="Density.Compact"
                            GridLines="DataGridGridLines.Both"
                            Responsive="true"
                            ValueChanged="SelectedItemChangedHandler"
                            AllowAlternatingRows="false"
                            AllowColumnResize="true"
                            SelectionMode="DataGridSelectionMode.Single"
                            AllowRowSelectOnRowClick="true"
                            Value="@this._selectedItems"
                            EditMode="DataGridEditMode.Single"
                            Style="height: fit-content">
                <Columns>
                    <RadzenDataGridColumn Property="WaferId" Title="WaferId" Width="225px">
                        <EditTemplate Context="waferSetup">
                            <WaferIdInput WaferId="@waferSetup.WaferId"
                                          WaferIdChanged="@((id) => { waferSetup.WaferId = id; StateHasChanged(); })"
                                          WaferList="@this._waferList"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="BurnNumber" Title="Burn Number">
                        <EditTemplate Context="waferSetup">
                            <RadzenNumeric TValue="int" Min="1" Max="10"
                                           @bind-Value="@waferSetup.BurnNumber"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Probe1" Title="P1"/>
                    <RadzenDataGridColumn Property="Probe2" Title="P2"/>
                    <RadzenDataGridColumn Property="StationPocket" Title="Pocket"/>
                    <RadzenDataGridColumn Property="Loaded" Visible="false">
                        <EditTemplate Context="waferSetup">
                            <RadzenStack Orientation="Orientation.Vertical"
                                         AlignItems="AlignItems.Center" Gap="0.5rem">
                                <RadzenLabel Text="@(waferSetup.Loaded ? "Loaded" : "Not Loaded")" Component="Loaded"/>
                                <RadzenSwitch @bind-Value="@waferSetup.Loaded" Name="Loaded"/>
                            </RadzenStack>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Probe1Pad" Title="P1 Pad"/>
                    <RadzenDataGridColumn Property="Probe2Pad" Title="P2 Pad"/>
                    <RadzenDataGridColumn Context="waferSetup" Visible="false" Title="Edit"
                                          Filterable="false"
                                          Sortable="false"
                                          TextAlign="TextAlign.Center"
                                          Frozen="true"
                                          FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="waferSetup">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light"
                                          Variant="Variant.Flat"
                                          Size="ButtonSize.ExtraSmall"
                                          Click="@(args => EditRow(waferSetup))"
                                          @onclick:stopPropagation="true"/>
                        </Template>
                        <EditTemplate Context="waferSetup">
                            <RadzenButton Icon="check" 
                                          ButtonStyle="ButtonStyle.Success"
                                          Variant="Variant.Flat"
                                          Size="ButtonSize.Medium"
                                          Click="@((args) => SaveRow(waferSetup))"
                                          aria-label="Save"/>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light"
                                          Variant="Variant.Flat"
                                          Size="ButtonSize.Medium"
                                          class="my-1 ms-1"
                                          Click="@((args) => CancelEdit(waferSetup))"
                                          aria-label="Cancel"/>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <RadzenStack Orientation="Orientation.Horizontal"
                         AlignItems="AlignItems.Center"
                         JustifyContent="JustifyContent.Center">
                <RadzenButton Text="Verify" Size="ButtonSize.Medium"
                              Click="@this.VerifyHandler"
                              Disabled="@this.TestRunning"
                              ButtonStyle="ButtonStyle.Info"
                              MouseEnter="@((args) => { this.ShowTooltip(args, "Verify the setup before starting a test"); })"
                              Style="width: 170px"/>
                <RadzenButton Text="Save" Size="ButtonSize.Medium"
                              Disabled="@(!this.CanSave())"
                              Click="@this.SaveHandler"
                              ButtonStyle="ButtonStyle.Secondary"
                              MouseEnter="@((args) => { this.ShowSaveTooltip(args); })"
                              Icon="save" Style="width: 170px"/>
                <RadzenButton Text="Cancel/Clear"
                              ButtonStyle="ButtonStyle.Danger"
                              Size="ButtonSize.Medium" Icon="cancel"
                              Click="@this.Cancel"
                              IsBusy="false"
                              Shade="Shade.Default"
                              MouseEnter="@((args) => { this.ShowTooltip(args, "Clear test setup"); })"
                              Disabled="@this.TestRunning"/>
            </RadzenStack>
            <TestSetupStatusView SetupAlerts="@this.TestSetupService.SetupAlerts" 
                                 SetupStatusVisible="@this._verified"/>
        </RadzenStack>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="60%" Collapsible="true">
            <RadzenTabs @ref=@this._tabs
                        RenderMode="TabRenderMode.Client"
                        @bind-SelectedIndex="@this._selectedTab"
                        Style="border: 1px solid #2db4dc; margin: 0.3rem;">
                <Tabs>
                    @for (int i = 0; i < this.TestSetupService.SetupCount; i++) {
                        var waferSetup = this.TestSetupService.GetWaferSetup(i);
                        int index = i;
                        <RadzenTabsItem Text="@GetPocketLabel(index)">
                            <PocketSetup PocketCaption="@GetPocketLabel(index)"
                                         WaferSetup="@waferSetup"
                                         WaferSetupChanged="@(async Task (setup) => { waferSetup = setup; await InvokeAsync(StateHasChanged); })"
                                         WaferList="@this._waferList"/>
                        </RadzenTabsItem>
                    }
                </Tabs>
            </RadzenTabs>
    </RadzenSplitterPane>
</RadzenSplitter>
@code {
    [Parameter] public EventCallback<List<WaferSetup>> Save { get; set; }
    [Parameter] public EventCallback CancelCallback { get; set; }
    [Parameter] public bool TestRunning { get; set; } = false;
    //[Parameter] public IEnumerable<Pad>? Map { get; set; } = Enumerable.Empty<Pad>();
    private RadzenDataGrid<WaferSetup> _waferSetupGrid;
    private IEnumerable<string>? _waferList=Enumerable.Empty<string>();
    private RadzenTabs _tabs;
    
    private List<WaferSetup> _selectedItems = new List<WaferSetup>();
    
    private int _selectedTab = 0;
    private bool _verified = false;
    
    protected override async Task OnInitializedAsync() {
        this.StationStatusService.OnTestSetupLoaded += this.OnTestLoadedHandler;
        this._waferList = await this.TestSetupService.GetQtList(TimeSpan.FromDays(147));
    }

    private void OnTestLoadedHandler(List<WaferSetup> testSetup) {
        this.TestSetupService.WaferSetups.Clear();
        this.TestSetupService.SetTestSetup(testSetup);
        InvokeAsync(StateHasChanged);
    }
    
    async Task EditRow(WaferSetup order) {
        await _waferSetupGrid.EditRow(order);
    }
    
    async Task SaveRow(WaferSetup waferSetup) {
        await this._waferSetupGrid.UpdateRow(waferSetup);
    }

    void CancelEdit(WaferSetup waferSetup) {
        this._waferSetupGrid.CancelEditRow(waferSetup);
    }

    private async Task VerifyHandler() {
        await this.TestSetupService.VerifyHandler();
        this._verified = true;
        if (this.TestSetupService.LoadedCount == 0) {
            await this.DialogAlert("At least one pocket must be loaded before starting a test", "Not Loaded");
            return;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task SaveHandler() {
        await this.VerifyHandler();
        if (this.TestSetupService.SetupError) {
            await this.Notify(NotificationSeverity.Error, "Error", "Setup has errors,plesae correct before saving");
            return;
        }
        await this.Save.InvokeAsync(this.TestSetupService.WaferSetups);
    }
    
    private async Task Cancel() {
        this._verified = false;
        this.TestSetupService.Reset();
        this._selectedTab = 0;
        await this._waferSetupGrid.Reload();
        await InvokeAsync(StateHasChanged);
        await this.CancelCallback.InvokeAsync();
    }
    
    private string GetPocketLabel(int index) {
        return index switch {
            0 => "Left Pocket(P1)",
            1 => "Middle Pocket(P2)",
            2 => "Right Pocket(P3)",
            _ => "Unknown"
        };
    }
    
    private async Task SelectedItemChangedHandler(IList<WaferSetup> obj) {
        var selected=obj[0];
        this._selectedTab=this.TestSetupService.WaferSetups.IndexOf(selected);
        Console.WriteLine($"SelectedTab: {this._selectedTab}");
    }
    
    private Task Notify(NotificationSeverity severity, string summary, string detail) {
        this.NotificationService.Notify(new NotificationMessage() {
            Severity = severity,
            Summary=summary,
            Detail=detail
        });
        return Task.CompletedTask;
    }

    private Task DialogAlert(string message,string title) {
        return this.DialogService.OpenAsync<AlertDialogView>(title,
            options:new DialogOptions() {
                CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true,
                ShowTitle = false
            }, parameters: new Dictionary<string, object>() { { "Title", title }, { "Message", message } });
    }

    private bool CanSave() {
        return this._verified && !this.TestSetupService.SetupError && !this.TestRunning && !this.TestSetupService.Saved;
    }
    
    private void ShowTooltip(ElementReference elementReference, string message,TooltipOptions? options = null) {
        this.ToolTipService.Open(elementReference, message, options);
    }
    
    private void ShowSaveTooltip(ElementReference elementReference,TooltipOptions? options = null) {
        
        if (this.TestRunning) {
            string message = "Test currently running";
            this.ToolTipService.Open(elementReference, message,options);
            return;
        }

        if (this.TestSetupService.Saved) {
            this.ToolTipService.Open(elementReference, "Setup already saved",options);
            return;
        }

        if (!this._verified) {
            string message = "Verify the setup before saving";
            this.ToolTipService.Open(elementReference, message,options);
            return;
        }
        
        if (this.TestSetupService.LoadedCount == 0) {
            string message = "Must have 1 loaded pocket to save the setup";
            this.ToolTipService.Open(elementReference, message,options);
            return;
        }
        
        if (this.TestSetupService.SetupError) {
            string message = "Clear the errors to save the setup";
            this.ToolTipService.Open(elementReference, message,options);
        }
        
    }

    public ValueTask DisposeAsync() {
        this.StationStatusService.OnTestSetupLoaded -= this.OnTestLoadedHandler;
        return ValueTask.CompletedTask;
    }

}