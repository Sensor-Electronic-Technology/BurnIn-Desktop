@using BurnInControl.Data.ComponentConfiguration.HeaterController
@using System.Globalization

@*<RadzenFieldset Text="@this.Label" Style="border: 5px solid #3a6d7c">*@
@if (this.HeaterConfig == null) {
    <p>Loading...</p>
} else {
    <RadzenTabsItem Text="@this.Label" @key="@this.Label">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.H4" Text="@this.Label"/>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenFormField Text="Digital Pin">
                    <RadzenNumeric TValue="sbyte"
                                   Value="@this.HeaterConfig.Pin"
                                   ValueChanged="PinChangedHandler"/>
                </RadzenFormField>
                <RadzenFormField Text="Temp Deviation">
                    <RadzenNumeric TValue="double"
                                   Value="@this.HeaterConfig.TempDeviation"
                                   ValueChanged="TemDevChangedHandler"/>
                </RadzenFormField>
            </RadzenStack>

            <RadzenStack Orientation="Orientation.Horizontal"
                         AlignItems="AlignItems.Start"
                         JustifyContent="JustifyContent.SpaceEvenly">
                <NtcConfigView NtcConfig="@this.HeaterConfig.NtcConfig" NtcConfigChanged="@this.NtcConfigChanged"/>
                <PidConfigView PidConfig="@this.HeaterConfig.PidConfig" PidConfigChanged="@this.PidConfigChangedHandler"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenTabsItem>
}

@*</RadzenFieldset>*@
@code{
    [Parameter]
    public string Label { get; set; }= "Heater Configuration";
    [Parameter]
    public HeaterConfiguration? HeaterConfig { get; set; }
    [Parameter]
    public EventCallback<HeaterConfiguration> HeaterConfigChanged { get; set; }

    private Task NtcConfigChanged(NtcConfiguration config) {
        if (this.HeaterConfig == null) {
            return Task.CompletedTask;
        }
        this.HeaterConfig.NtcConfig = config;
        return this.HeaterConfigChanged.InvokeAsync(this.HeaterConfig);
    }

    private Task PidConfigChangedHandler(PidConfiguration config) {
        if (this.HeaterConfig == null) {
            return Task.CompletedTask;
        }
        this.HeaterConfig.PidConfig = config;
        return this.HeaterConfigChanged.InvokeAsync(this.HeaterConfig);
    }

    private Task PinChangedHandler(sbyte pin) {
        if (this.HeaterConfig == null) {
            return Task.CompletedTask;
        }
        this.HeaterConfig.Pin=pin;
        return this.HeaterConfigChanged.InvokeAsync(this.HeaterConfig);
    }

    private Task TemDevChangedHandler(double dev) {
        if (this.HeaterConfig == null) {
            return Task.CompletedTask;
        }
        this.HeaterConfig.TempDeviation=dev;
        return this.HeaterConfigChanged.InvokeAsync(this.HeaterConfig);
    }

}