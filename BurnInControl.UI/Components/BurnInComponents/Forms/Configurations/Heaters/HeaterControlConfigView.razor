@using BurnInControl.Data.ComponentConfiguration.HeaterController
@using BurnInControl.UI.Services
@inject DialogService DialogService
@inject ConsoleWriter ConsoleWriter

@if(this.HeaterControllerConfig == null) {
    <p>Loading...</p>
} else {
    <RadzenTabs TabPosition="TabPosition.Left" RenderMode="Radzen.TabRenderMode.Server">
        <Tabs>
            @foreach (var config in this.HeaterControllerConfig.HeaterConfigurations) {
                <HeaterConfigView Label="@GetLabel(config.HeaterId-1)" HeaterConfig="@config"
                                  HeaterConfigChanged="@this.HeaterChanged"/>
            }
        </Tabs>
    </RadzenTabs>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton Text="Save" Click="@this.SaveHandler" 
                      ButtonStyle="ButtonStyle.Info" 
                      Style="width: 125px;height: 50px;"/>
        <RadzenButton Text="Cancel" Click="@this.Canceled" 
                      ButtonStyle="ButtonStyle.Danger" 
                      Style="width: 125px;height: 50px;"/>
        <RadzenButton Text="Get Config" Click="@this.GetConfig" 
                      ButtonStyle="ButtonStyle.Secondary" 
                      Style="width: 125px;height: 50px;"/>
    </RadzenStack>
}
@code {
    [Parameter] public HeaterControllerConfig? HeaterControllerConfig { get; set; } = new();
    [Parameter] public EventCallback<HeaterControllerConfig> HeaterControllerConfigChanged { get; set; }
    [Parameter] public EventCallback Canceled { get; set; }
    [Parameter] public EventCallback<HeaterControllerConfig> Saved { get; set; }
    [Parameter] public EventCallback GetConfig { get; set; }
    
    private Task SaveHandler() {
        return this.Saved.InvokeAsync(this.HeaterControllerConfig);
    }

    private Task HeaterChanged(HeaterConfiguration hconfig) {
        if (this.HeaterControllerConfig == null) {
            return Task.CompletedTask;
        }
        this.HeaterControllerConfig.HeaterConfigurations[hconfig.HeaterId - 1] = hconfig; 
        this.ConsoleWriter.LogMessage($"Heater {hconfig.HeaterId}", AlertStyle.Light);
        return this.HeaterControllerConfigChanged.InvokeAsync(this.HeaterControllerConfig);
    }
    
    private string GetLabel(int index) {
        if(index==0) {
            return "Left Heater Configuration";
        }else if (index == 1) {
            return "Middle Heater Configuration";
        } else {
            return "Right Heater Configuration";
        }
    }
}