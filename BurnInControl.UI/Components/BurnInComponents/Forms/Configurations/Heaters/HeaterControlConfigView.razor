@using BurnInControl.Data.ComponentConfiguration.HeaterController
@using BurnInControl.UI.Services
@inject DialogService DialogService
@inject ConsoleWriter ConsoleWriter

@if(this.HeaterControllerConfig == null) {
    <p>Loading...</p>
} else {
    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenFieldset Text="Heater Controller Settings">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFormField Text="Target Temperature">
                        <RadzenNumeric TValue="int"
                                       Value="@this.HeaterControllerConfig.TemperatureSetPoint"
                                       ValueChanged="SetTempChangedHandler"
                                       Min="30"
                                       Max="95"
                                       Step="5"/>
                    </RadzenFormField>
                    <RadzenFormField Text="Read Interval(ms)">
                        <RadzenNumeric TValue="ulong"
                                       Value="@this.HeaterControllerConfig.ReadInterval"
                                       ValueChanged="@this.ReadIntervalChangedHandler"
                                       Min="100"
                                       Max="500"/>
                    </RadzenFormField>
                    <RadzenFieldset Text="Window Size ms">
                        <RadzenNumeric TValue="ulong"
                                       Step="100"
                                       Name="WindowSizeMs"
                                       Value="@this.HeaterControllerConfig.WindowSize"
                                       ValueChanged="@this.WindowSizeChangedHandler"/>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenFieldset>
            

            <RadzenTabs TabPosition="TabPosition.Left" RenderMode="TabRenderMode.Server">
                <Tabs>
                    @foreach (var config in this.HeaterControllerConfig.HeaterConfigurations) {
                        <HeaterConfigView Label="@GetLabel(config.HeaterId - 1)" HeaterConfig="@config"
                                          HeaterConfigChanged="@this.HeaterChanged"/>
                    }
                </Tabs>
            </RadzenTabs>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Text="Save" Click="@this.SaveHandler"
                          ButtonStyle="ButtonStyle.Info"
                          Disabled="@(!this.StationConnected)"
                          Style="width: 125px;height: 50px;"/>
            <RadzenButton Text="Cancel" 
                          Click="@this.Canceled"
                          ButtonStyle="ButtonStyle.Danger"
                          Disabled="@(!this.StationConnected)"
                          Style="width: 125px;height: 50px;"/>
            <RadzenButton Text="Get Config" Click="@this.GetConfig"
                          Disabled="@(!this.StationConnected)"
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="width: 125px;height: 50px;"/>
        </RadzenStack>
    </RadzenStack>
}
@code {
    [Parameter] public HeaterControllerConfig? HeaterControllerConfig { get; set; } = new();
    [Parameter] public EventCallback<HeaterControllerConfig> HeaterControllerConfigChanged { get; set; }
    [Parameter] public EventCallback Canceled { get; set; }
    [Parameter] public EventCallback<HeaterControllerConfig> Saved { get; set; }
    [Parameter] public EventCallback GetConfig { get; set; }
    [Parameter] public bool StationConnected { get; set; }
    
    private Task SaveHandler() {
        return this.Saved.InvokeAsync(this.HeaterControllerConfig);
    }

    private Task HeaterChanged(HeaterConfiguration hconfig) {
        if (this.HeaterControllerConfig == null) {
            return Task.CompletedTask;
        }
        this.HeaterControllerConfig.HeaterConfigurations[hconfig.HeaterId - 1] = hconfig; 
        this.ConsoleWriter.LogMessage($"Heater {hconfig.HeaterId}", AlertStyle.Light);
        return this.HeaterControllerConfigChanged.InvokeAsync(this.HeaterControllerConfig);
    }
    
    private string GetLabel(int index) {
        if(index==0) {
            return "Left Heater Configuration";
        }else if (index == 1) {
            return "Middle Heater Configuration";
        } else {
            return "Right Heater Configuration";
        }
    }

    private Task SetTempChangedHandler(int setTemp) {
        if (this.HeaterControllerConfig == null) {
            return Task.CompletedTask;
        }
        this.HeaterControllerConfig.TemperatureSetPoint = setTemp;
        return this.HeaterControllerConfigChanged.InvokeAsync(this.HeaterControllerConfig);
    }

    private Task ReadIntervalChangedHandler(ulong interval) {
        if (this.HeaterControllerConfig == null) {
            return Task.CompletedTask;
        }
        this.HeaterControllerConfig.ReadInterval = interval;
        return this.HeaterControllerConfigChanged.InvokeAsync(this.HeaterControllerConfig);
    }
    
    private Task WindowSizeChangedHandler(ulong windowSize) {
        if (this.HeaterControllerConfig == null) {
            return Task.CompletedTask;
        }
        this.HeaterControllerConfig.WindowSize = windowSize;
        return this.HeaterControllerConfigChanged.InvokeAsync(this.HeaterControllerConfig);
    }

}