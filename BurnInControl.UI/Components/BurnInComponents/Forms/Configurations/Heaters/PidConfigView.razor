@using BurnInControl.Data.ComponentConfiguration.HeaterController

<RadzenFieldset Text="PID Configuration" Style="width: fit-content">
    <RadzenStack AlignItems="AlignItems.Center" Gap="1rem" Style="width: fit-content">
        <RadzenFieldset Text="PID Parameters"
                        Style="width: fit-content">
            <RadzenStack Orientation="Orientation.Vertical"
                         AlignItems="AlignItems.Center"
                         JustifyContent="JustifyContent.Center">

                <RadzenStack Orientation="Orientation.Horizontal"
                             JustifyContent="JustifyContent.Center"
                             AlignItems="AlignItems.Center">
                    <ExponentialInput Label="Kp"
                                      Value="@this.PidConfig.Kp"
                                      ValueChanged="@this.KpChangedHandler"/>
                    <ExponentialInput Label="Ki"
                                      Value="@this.PidConfig.Ki"
                                      ValueChanged="@this.KiChangedHandler"/>
                </RadzenStack>
                <RadzenRow>
                    <ExponentialInput Label="Kd"
                                      Value="@this.PidConfig.Kd"
                                      ValueChanged="@this.KdChangedHandler"/>
                </RadzenRow>
            </RadzenStack>
        </RadzenFieldset>
        <RadzenFieldset Text="Window Size ms">
            <RadzenNumeric TValue="ulong" 
                           Step="100" 
                           Name="WindowSizeMs"
                           Value="@this.PidConfig.WindowSizeMs"
                           ValueChanged="@this.WindowSizeChangedHandler"/>
        </RadzenFieldset>
    </RadzenStack>

</RadzenFieldset>


@code {
    [Parameter]
    public PidConfiguration PidConfig { get; set; }
    
    [Parameter]
    public EventCallback<PidConfiguration> PidConfigChanged { get; set; }

    private async Task KpChangedHandler(double newValue) {
        this.PidConfig.Kp = newValue; 
        await this.PidConfigChanged.InvokeAsync(this.PidConfig);
    }
    
    private async Task KdChangedHandler(double newValue) {
        this.PidConfig.Ki = newValue; 
        await this.PidConfigChanged.InvokeAsync(this.PidConfig);
    }
    
    private async Task KiChangedHandler(double newValue) {
        this.PidConfig.Kd = newValue; 
        await this.PidConfigChanged.InvokeAsync(this.PidConfig);
    }
    
    private async Task WindowSizeChangedHandler(ulong newValue) {
        this.PidConfig.WindowSizeMs = newValue; 
        await this.PidConfigChanged.InvokeAsync(this.PidConfig); 
    }
    
}