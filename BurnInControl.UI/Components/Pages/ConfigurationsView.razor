@page "/config-view"
@using System.Text.Json
@using BurnInControl.HubDefinitions.Hubs
@using BurnInControl.UI.Components.BurnInComponents.Forms.Configurations.Heaters
@using BurnInControl.UI.Components.BurnInComponents.Forms.Configurations.Probes
@using BurnInControl.Infrastructure.StationModel
@using BurnInControl.Shared
@using BurnInControl.Shared.ComDefinitions.Packets
@using BurnInControl.Shared.ComDefinitions.Station
@using BurnInControl.UI.Components.BurnInComponents.Forms.Configurations.Station
@using Microsoft.AspNetCore.SignalR.Client
@using Environment = System.Environment
@inject StationConfigDataService ConfigurationDataService
@inject StationStatusService StationStatusService
@inject IConfiguration Configuration
@inject DialogService DialogService
@inject NotificationService NotificationService 
@inject ILogger<ConfigurationsView> _logger

<RadzenSplitter Orientation="Orientation.Vertical">
    <RadzenSplitterPane Size="60%">
        @if (this._burnInConfiguration == null) {
            <RadzenStack AlignItems="AlignItems.Center" Class="rz-m-12" Gap="2rem">
                <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H3">Loading......</RadzenText>
                <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large"/>
            </RadzenStack>
        } else {
            <RadzenTabs SelectedIndex="0" RenderMode="TabRenderMode.Client">
                <Tabs>
                    <RadzenTabsItem Text="Station Configuration">
                        <StationConfigView StationConfig="@this._burnInConfiguration.ControllerConfig"
                                           CancelPressed="@this.Refresh"
                                           StationConnected="@this.Connected"
                                           StationConfigChanged="@this.StationConfigChangedHandler"
                                           SavePressed="@this.StationConfigSaveHandler"/>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Heater Configuration">
                        <HeaterControlConfigView HeaterControllerConfig="@this._burnInConfiguration.HeaterControllerConfig"
                                                 Canceled="@this.Refresh"
                                                 StationConnected="@this.Connected"
                                                 Saved="@this.HeaterControllerConfigSaveHandler"
                                                 HeaterControllerConfigChanged="@this.HeaterControlConfigChangedHandler"
                                                 GetConfig="@this.GetHeaterConfigHandler"/>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Probes Configuration">
                        <ProbesControlView ProbeControllerConfig="@this._burnInConfiguration.ProbeControllerConfig"
                                           CancelPressed="@this.Refresh"
                                           StationConnected="@this.Connected"
                                           ProbeControllerConfigChanged="@this.ProbeControlConfigChangedHandler"
                                           SavePressed="@this.ProbeConfigSaveHandler"/>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        }
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="40%" Collapsible="false">
    <RadzenSplitter Orientation="Orientation.Horizontal" style=" border: 1px solid rgba(0,0,0,.08);">
        <RadzenSplitterPane Size="20%" Collapsible="false">
            <RadzenStack Orientation="Orientation.Vertical"
                         AlignItems="AlignItems.Center"
                         Style="margin: 0.5rem">

                <RadzenFieldset Text="Config Control" Style="width: fit-content;">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Refresh"
                                      Click="@this.Refresh"
                                      ButtonStyle="ButtonStyle.Warning"
                                      Style="width: 150px;height: 50px;"/>
                        <RadzenButton Text="Format SD Card"
                                      Click="@this.FormatSdHandler"
                                      ButtonStyle="ButtonStyle.Danger"
                                      Style="width: 150px;height: 50px;"/>
                    </RadzenStack>

                </RadzenFieldset>
                <StationServiceControl Connect="@this.OnConnectClicked"
                                       UsbVisible="false"
                                       ServiceConnected="@this.Connected"/>
            </RadzenStack>
        </RadzenSplitterPane>
        <RadzenSplitterPane Size="80%"
                            Resizable="true">
            <EventConsole @ref="@this._eventConsole"/>
        </RadzenSplitterPane>
    </RadzenSplitter>
    </RadzenSplitterPane>
</RadzenSplitter>
@code {
    [Inject] HubClient HubClient { get; set; }
    private EventConsole _eventConsole;
    /*private HubConnection? _hubConnection;*/
    /*private bool Connected=>this._hubConnection?.State==HubConnectionState.Connected;*/
    private bool Connected => this.HubClient.IsConnected;

    private BurnStationConfiguration? _burnInConfiguration;
    private string _stationId = "S01";
    
    protected override async Task OnInitializedAsync() {
        this.SetupHub();
        Console.WriteLine($"StationId: {this.Configuration["StationId"]}");
        this._stationId = this.Configuration["StationId"] ?? "S01";
        this._burnInConfiguration = await this.ConfigurationDataService.GetStationBurnInConfig(this._stationId);
    }

    private void SetupHub() {
        /*var hubAddress=Environment.GetEnvironmentVariable("StationHub");
        string addr=string.IsNullOrEmpty(hubAddress) ? HubConstants.HubAddress:hubAddress;*/
        //string addr = "http://localhost:5066/hubs/station";
        //string addr = "http://192.168.68.108:5066/hubs/station";
        /*this._hubConnection = new HubConnectionBuilder()
            .WithUrl(addr)
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.Zero, 
                TimeSpan.FromSeconds(10),TimeSpan.FromSeconds(30),
                TimeSpan.FromSeconds(60) })
            .Build();*/
        this.HubClient.HubConnection.On<string,bool,string>(HubConstants.Events.OnConfigSaveStatus,this.ReceiveSaveStatus);
        this.HubClient.HubConnection.On<bool,int,string>(HubConstants.Events.OnRequestConfigHandler,this.ReceiveRequestedConfig); 
        this.HubClient.HubConnection.On<int,string>(HubConstants.Events.OnSerialComMessage, this.OnSerialComMessageReceived);
        /*this._hubConnection.On<string,bool,string>(HubConstants.Events.OnConfigSaveStatus,this.ReceiveSaveStatus);
        this._hubConnection.On<bool,int,string>(HubConstants.Events.OnRequestConfigHandler,this.ReceiveRequestedConfig); 
        this._hubConnection.On<int,string>(HubConstants.Events.OnSerialComMessage, this.OnSerialComMessageReceived);*/
    }
    
    private async Task StartConnection() {
        if (!this.Connected) {
            try {
                await this.HubClient.StartAsync();
                if (this.Connected) {
                    this._eventConsole.Log("Hub Connection Established",AlertStyle.Success);
                } else {
                    this._eventConsole.Log("Hub Connection Failed",AlertStyle.Danger);
                }
            }  catch(Exception e) {
                string error = e.Message;
                if (e.InnerException != null) {
                    error+="\n"+e.InnerException.Message;
                }
                this._eventConsole.Log("Hub Connection Failed",AlertStyle.Danger);
            }
        }
    }

    #region ButtonHandlers
    
    private async Task Refresh() {
        this._burnInConfiguration = null;
        await InvokeAsync(StateHasChanged);
        this._burnInConfiguration = await this.ConfigurationDataService.GetStationBurnInConfig(this._stationId);
        await InvokeAsync(StateHasChanged);
    }
    
    private Task OnConnectClicked() {
        if (this.Connected) {
            this._eventConsole.Log("Disconnect Clicked",AlertStyle.Warning);
            this.StationStatusService.StationState = StationState.Offline;
            return this.HubClient.StopAsync();
        } else {
            this.StationStatusService.StationState = StationState.Idle;
            this._eventConsole.Log("Connect Clicked",AlertStyle.Success);
            //return this.StartConnection();
            return this.HubClient.StartAsync();
        }
    }
    
    private Task FormatSdHandler() {
        if (this.Connected) {
            return this.HubClient.HubConnection.SendAsync(HubConstants.Methods.SendCommand, StationCommand.FormatSdCard);
        }
        this.NotifyNotConnected();
        return Task.CompletedTask;
    }

    private async Task HeaterControllerConfigSaveHandler(HeaterControllerConfig heaterControllerConfig) {
        var result=await this.ConfigurationDataService.UpdateSubConfig(this._stationId, heaterControllerConfig);
        if (result.IsError) {
            this._eventConsole.Log(result.FirstError.Description,AlertStyle.Danger);
        } else {
            this._eventConsole.Log("Success: Saved HeaterControllerConfiguration",AlertStyle.Success);
            if (this.Connected) {
                this._eventConsole.Log("Sending hub request",AlertStyle.Info);
                await this.HubClient.HubConnection.SendAsync(HubConstants.Methods.SendHeaterControlConfig, heaterControllerConfig);
            } else {
                this._eventConsole.Log("Warning: Service not connected,firmware configuration will not be updated",AlertStyle.Danger);
            }
 
        }
    }

    private async Task ProbeConfigSaveHandler(ProbeControllerConfig probeControllerConfig) {
        var result = await this.ConfigurationDataService.UpdateSubConfig(this._stationId, probeControllerConfig);
        if (result.IsError) {
            this._eventConsole.Log(result.FirstError.Description,AlertStyle.Danger);
        } else {
            this._eventConsole.Log("Success: Saved ProbeControllerConfig",AlertStyle.Success);
            if (this.Connected) {
                this._eventConsole.Log("Sending hub request",AlertStyle.Info);
                await this.HubClient.HubConnection.SendAsync(HubConstants.Methods.SendProbeControlConfig, probeControllerConfig);
            } else {
                this._eventConsole.Log("Warning: Service not connected,firmware configuration will not be updated",AlertStyle.Danger);
            }
        }
    }

    private async Task StationConfigSaveHandler(StationConfiguration stationConfig) {
        var result = await this.ConfigurationDataService.UpdateSubConfig(this._stationId, stationConfig);
        if (result.IsError) {
            this._eventConsole.Log(result.FirstError.Description,AlertStyle.Danger);
        } else {
            this._eventConsole.Log("Success: Saved StationConfiguration",AlertStyle.Success);
            if (this.Connected) {
                this._eventConsole.Log("Sending hub request",AlertStyle.Info);
                await this.HubClient.HubConnection.SendAsync(HubConstants.Methods.SendStationConfig,stationConfig);
            } else {
                this._eventConsole.Log("Warning: Service not connected,firmware configuration will not be updated",AlertStyle.Danger);
            }
        }
    }

    private Task GetHeaterConfigHandler() {
        if (this.Connected) {
            this._eventConsole.Log("Send request for HeaterControllerConfig",AlertStyle.Info);
            return this.HubClient.HubConnection.SendAsync(HubConstants.Methods.RequestConfig, ConfigType.HeaterControlConfig);
        }else {
            this._eventConsole.Log("Warning: Service not connected,request will not be sent",AlertStyle.Danger);
        }
        return Task.CompletedTask;
    }
    

    #endregion
    
    #region HubHandlers
    
    private Task OnSerialComMessageReceived(int type,string message) {
        StationMessageType messageType = (StationMessageType)type;
        switch (messageType) {
            case StationMessageType.GENERAL: {
                this._eventConsole.Log(message,AlertStyle.Info);
                break;
            }
            case StationMessageType.INIT: {
                this._eventConsole.Log(message,AlertStyle.Secondary);
                break;
            }
            case StationMessageType.NOTIFY: {
                this.Notify("Station Notify",message,NotificationSeverity.Info);
                break;
            }
            case StationMessageType.ERROR: {
                this.Notify("Station Error",message,NotificationSeverity.Error);
                break;
            }
        }
        return Task.CompletedTask;
    }
    
    private async Task ReceiveSaveStatus(string type, bool success, string message) {
        if (success) {
            this._eventConsole.Log($"Configuration saved successfully, Type: {type}", AlertStyle.Success);
        }else {
            this._eventConsole.Log($"Failed to save configuration, Type: {type}", AlertStyle.Danger);
        }
    }
    
    private async Task ReceiveRequestedConfig(bool success, int configTypeValue,string jsonString) {
        if (success) {
            if (ConfigType.TryFromValue(configTypeValue, out var configType)) {
                switch (configType.Name) {
                    case nameof(ConfigType.HeaterControlConfig): {
                            var heaterConfig=JsonSerializer.Deserialize<HeaterControllerConfig>(jsonString);
                            if (heaterConfig != null) {
                                var jsonOptions = new JsonSerializerOptions() { WriteIndented = true };
                                var controlConfig = JsonSerializer.Serialize(heaterConfig,jsonOptions);
                                var serverConfig=JsonSerializer.Serialize(this._burnInConfiguration?.HeaterControllerConfig,jsonOptions);
                                await this.DialogService.OpenAsync<ConfigDifViewer>("Heater Controller Config",
                                    new Dictionary<string, object> {
                                        {"ServerConfig",serverConfig},
                                        {"ControllerConfig",controlConfig}
                                    },options: new DialogOptions(){ Width = "600px",Draggable = true,ShowClose = true,Height = "600px"});
                            } else {
                                this._eventConsole.Log("Failed to deserialize HeaterControllerConfig from string",AlertStyle.Danger);
                            }
                        break;
                    }
                    case nameof(ConfigType.ProbeControlConfig): {
                        break;
                    }
                    case nameof(ConfigType.ControllerConfig): {
                        break;
                    }
                }
            }

        } else {
            this._eventConsole.Log($"Failed to receive requested configuration. ConfigType: {configTypeValue}",AlertStyle.Danger);
        }
    }
    
    #endregion
    
    #region NotifyMethods
    
    private void Notify(string summary,string message,NotificationSeverity severity=NotificationSeverity.Info,int duration=5000) {
        try {
            var notification=new NotificationMessage { 
                Severity = severity, 
                Summary = summary, 
                Detail = message, 
                Duration = 10000 };
            this.NotificationService.Notify(notification);
        }catch(Exception e) {
            this._logger.LogError("Notification Error: {Message}",e.ToErrorMessage());
        }
    }

    private void NotifyNotConnected() {
        try {
            var notification=new NotificationMessage {
                Severity = NotificationSeverity.Error, 
                Summary = "Station Service Not Connected", 
                Detail = "Cannot Send Command", 
                Duration = 10000 };
            this.NotificationService.Notify(notification);
        }catch(Exception e) {
            this._logger.LogError("Notification Error: {Message}",e.ToErrorMessage());
        }
    }
   
    #endregion

    #region ChangeHandlers

    private Task StationConfigChangedHandler(StationConfiguration stationConfig) {
        if (this._burnInConfiguration == null) {
            this._logger.LogError("Error: While updating StationConfig, BurnInConfiguration is null");
            return Task.CompletedTask;
        }
        this._burnInConfiguration.ControllerConfig= stationConfig;
        return Task.CompletedTask;
    }

    private Task HeaterControlConfigChangedHandler(HeaterControllerConfig heaterControlConfig) {
        if (this._burnInConfiguration == null) {
            this._logger.LogError("Error: While updating HeaterControllerConfig, BurnInConfiguration is null");
            return Task.CompletedTask;
        }
        this._burnInConfiguration.HeaterControllerConfig = heaterControlConfig;
        return Task.CompletedTask;
    }

    private Task ProbeControlConfigChangedHandler(ProbeControllerConfig probeControlConfig) {
        if (this._burnInConfiguration == null) {
            this._logger.LogError("Error: While updating ProbeControllerConfig, BurnInConfiguration is null");
            return Task.CompletedTask;
        }
        this._burnInConfiguration.ProbeControllerConfig = probeControlConfig;
        return Task.CompletedTask;
    }

    #endregion




}