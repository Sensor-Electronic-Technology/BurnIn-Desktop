@page "/config-view"
@using System.Text.Json
@using BurnInControl.HubDefinitions.Hubs
@using BurnInControl.UI.Components.BurnInComponents.Forms.Configurations.Heaters
@using BurnInControl.UI.Components.BurnInComponents.Forms.Configurations.Probes
@using BurnInControl.Infrastructure.StationModel
@using BurnInControl.Shared.ComDefinitions.Station
@using BurnInControl.UI.Components.BurnInComponents.Forms.Configurations.Station
@using Microsoft.AspNetCore.SignalR.Client
@using Environment = System.Environment
@inject StationConfigDataService ConfigurationDataService
@inject IConfiguration Configuration
@inject DialogService DialogService


<RadzenStack Orientation="Orientation.Vertical">
    @if(this._burnInConfiguration == null) {
    <RadzenStack AlignItems="AlignItems.Center" Class="rz-m-12" Gap="2rem">
        <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H3">Loading......</RadzenText>
        <RadzenProgressBarCircular Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large"/>
    </RadzenStack>
    } else {
        <RadzenTabs SelectedIndex="0" RenderMode="TabRenderMode.Client">
            <Tabs>
                <RadzenTabsItem Text="Station Configuration">
                    <StationConfigView StationConfig="@this._burnInConfiguration.StationConfiguration" 
                                       CancelPressed="@this.Refresh" 
                                       SavePressed="@this.StationConfigSaveHandler"/>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Heater Configuration">
                    <HeaterControlConfigView HeaterControllerConfig="@this._burnInConfiguration.HeaterConfig"
                                             Canceled="@this.Refresh"
                                             Saved="HeaterControllerConfigSaveHandler"
                                             GetConfig="@this.GetHeaterConfigHandler"/>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Probes Configuration">
                    <ProbesControlView ProbeControllerConfig="@this._burnInConfiguration.ProbesConfiguration"
                                       CancelPressed="@this.Refresh"
                                       SavePressed="@this.ProbeConfigSaveHandler"/>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    }
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton Text="Refresh"
                      Click="@this.Refresh" 
                      ButtonStyle="ButtonStyle.Danger" Style="width: 125px;height: 50px;"/>
    </RadzenStack>
    <EventConsole @ref="@this._eventConsole"/>
</RadzenStack>


@code {
    private EventConsole _eventConsole;
    private HubConnection? _hubConnection;
    private bool Connected=>this._hubConnection?.State==HubConnectionState.Connected;

    private BurnStationConfiguration? _burnInConfiguration;
    private string _stationId = "S01";
    
    protected override async Task OnInitializedAsync() {
        this.SetupHub();
        Console.WriteLine($"StationId: {this.Configuration["StationId"]}");
        this._stationId = this.Configuration["StationId"] ?? "S01";
        this._burnInConfiguration = await this.ConfigurationDataService.GetStationBurnInConfig(this._stationId);
        await this.StartConnection();
    }

    private void SetupHub() {
        var hubAddress=Environment.GetEnvironmentVariable("StationHub");
        //string addr=string.IsNullOrEmpty(hubAddress) ? HubConstants.HubAddress:hubAddress;
        string addr = "http://localhost:5066/hubs/station";
        this._hubConnection = new HubConnectionBuilder()
            .WithUrl(addr)
            .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.Zero, 
                TimeSpan.FromSeconds(10),TimeSpan.FromSeconds(30),
                TimeSpan.FromSeconds(60) })
            .Build();
        this._hubConnection.On<string,bool,string>(HubConstants.Events.OnConfigSaveStatus,this.ReceiveSaveStatus);
        this._hubConnection.On<bool,int,string>(HubConstants.Events.OnRequestConfigHandler,this.ReceiveRequestedConfig);
    }
    
    private async Task StartConnection() {
        if (!this.Connected) {
            try {
                await this._hubConnection?.StartAsync();
                if (this.Connected) {
                    this._eventConsole.Log("Hub Connection Established",AlertStyle.Success);
                } else {
                    this._eventConsole.Log("Hub Connection Failed",AlertStyle.Danger);
                }
            }  catch(Exception e) {
                string error = e.Message;
                if (e.InnerException != null) {
                    error+="\n"+e.InnerException.Message;
                }
                this._eventConsole.Log("Hub Connection Failed",AlertStyle.Danger);
            }
        }
    }

    private async Task ReceiveSaveStatus(string type, bool success, string message) {
        if (success) {
            this._eventConsole.Log($"Configuration saved successfully, Type: {type}", AlertStyle.Success);
        }else {
            this._eventConsole.Log($"Failed to save configuration, Type: {type}", AlertStyle.Danger);
        }
    }
    
    private async Task ReceiveRequestedConfig(bool success, int configTypeValue,string jsonString) {
        if (success) {
            if (ConfigType.TryFromValue(configTypeValue, out var configType)) {
                switch (configType.Name) {
                    case nameof(ConfigType.HeaterControlConfig): {
                            var heaterConfig=JsonSerializer.Deserialize<HeaterControllerConfig>(jsonString);
                            if (heaterConfig != null) {
                                var jsonOptions = new JsonSerializerOptions() { WriteIndented = true };
                                var controlConfig = JsonSerializer.Serialize(heaterConfig,jsonOptions);
                                var serverConfig=JsonSerializer.Serialize(this._burnInConfiguration?.HeaterConfig,jsonOptions);
                                await this.DialogService.OpenAsync<ConfigDifViewer>("Heater Controller Config",
                                    new Dictionary<string, object> {
                                        {"ServerConfig",serverConfig},
                                        {"ControllerConfig",controlConfig}
                                    },options: new DialogOptions(){ Width = "600px",Draggable = true,ShowClose = true,Height = "600px"});
                            } else {
                                this._eventConsole.Log("Failed to deserialize HeaterControllerConfig from string",AlertStyle.Danger);
                            }
                        break;
                    }
                    case nameof(ConfigType.ProbeControlConfig): {
                        break;
                    }
                    case nameof(ConfigType.ControllerConfig): {
                        break;
                    }
                }
            }

        } else {
            this._eventConsole.Log($"Failed to receive requested configuration. ConfigType: {configTypeValue}",AlertStyle.Danger);
        }
    }
    
    private Task SaveHandler() {
        return Task.CompletedTask;
    }
    
    private async Task Refresh() {
        this._burnInConfiguration = null;
        await InvokeAsync(StateHasChanged);
        this._burnInConfiguration = await this.ConfigurationDataService.GetStationBurnInConfig(this._stationId);
        await InvokeAsync(StateHasChanged);
    }

    private async Task HeaterControllerConfigSaveHandler(HeaterControllerConfig heaterControllerConfig) {
        var result=await this.ConfigurationDataService.UpdateSubConfig(this._stationId, heaterControllerConfig);
        if (result.IsError) {
            this._eventConsole.Log("Error: Failed to save HeaterControllerConfiguration",AlertStyle.Danger);
        } else {
            this._eventConsole.Log("Success: Saved HeaterControllerConfiguration",AlertStyle.Success);
            if (this.Connected) {
                this._eventConsole.Log("Sending hub request",AlertStyle.Info);
                await this._hubConnection.SendAsync(HubConstants.Methods.SendConfiguration, heaterControllerConfig);
            } else {
                this._eventConsole.Log("Warning: Service not connected,firmware configuration will not be updated",AlertStyle.Danger);
            }
 
        }
    }

    private async Task ProbeConfigSaveHandler(ProbeControllerConfig probeControllerConfig) {
        var result = await this.ConfigurationDataService.UpdateSubConfig(this._stationId, probeControllerConfig);
        if (result.IsError) {
            this._eventConsole.Log("Error: Failed to save ProbeControllerConfig",AlertStyle.Danger);
        } else {
            this._eventConsole.Log("Success: Saved ProbeControllerConfig",AlertStyle.Success);
            if (this.Connected) {
                this._eventConsole.Log("Sending hub request",AlertStyle.Info);
                await this._hubConnection.SendAsync(HubConstants.Methods.SendConfiguration, probeControllerConfig);
            } else {
                this._eventConsole.Log("Warning: Service not connected,firmware configuration will not be updated",AlertStyle.Danger);
            }
        }
    }

    private async Task StationConfigSaveHandler(StationConfiguration stationConfig) {
        var result = await this.ConfigurationDataService.UpdateSubConfig(this._stationId, stationConfig);
        if (result.IsError) {
            this._eventConsole.Log("Error: Failed to save StationConfiguration",AlertStyle.Danger);
        } else {
            this._eventConsole.Log("Success: Saved StationConfiguration",AlertStyle.Success);
            if (this.Connected) {
                this._eventConsole.Log("Sending hub request",AlertStyle.Info);
                await this._hubConnection.SendAsync(HubConstants.Methods.SendConfiguration,stationConfig);
            } else {
                this._eventConsole.Log("Warning: Service not connected,firmware configuration will not be updated",AlertStyle.Danger);
            }
        }
    }

    private Task GetHeaterConfigHandler() {
        if (this.Connected) {
            this._eventConsole.Log("Send request for HeaterControllerConfig",AlertStyle.Info);
            return this._hubConnection.SendAsync(HubConstants.Methods.RequestConfig, ConfigType.HeaterControlConfig);
        }else {
            this._eventConsole.Log("Warning: Service not connected,request will not be sent",AlertStyle.Danger);
        }
        return Task.CompletedTask;
    }

}