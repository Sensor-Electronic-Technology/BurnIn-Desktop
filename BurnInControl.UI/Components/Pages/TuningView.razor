@page "/tune-view"
@using System.Text.Json
@using System.Timers
@using BurnInControl.HubDefinitions.Hubs
@using BurnInControl.Shared.ComDefinitions
@using BurnInControl.Shared.ComDefinitions.Station
@using BurnInControl.UI.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject ILogger<TuningView> _logger
@inject StationStatusService StationStatusService
@inject NotificationService NotificationService
@rendermode InteractiveServer

<RadzenSplitter Orientation="Orientation.Horizontal">
    <RadzenSplitterPane Size="20%" Collapsed="@this._runtimePaneCollapsed">
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenStack Orientation="Orientation.Vertical">
                <RadzenText TextStyle="TextStyle.DisplayH5" Text="Tuning Controls"></RadzenText>
                <AutoTuneControl StartPressed="@this.StartHandler"
                                 ModeSwPressed="@this.ModeSwHandler"
                                 Mode="@this._mode"
                                 TemperatureSetPoint="@(this._stationData.TemperatureSetPoint)"
                                 TemperatureToggle="@this.ToggleTemperatureHandler"
                                 IsTuning="@this._data.IsTuning"
                                 Connect="@this.OnConnectClicked"
                                 ServiceConnected="@this.Connected"
                                 UsbConnected="@this._usbConnected"
                                 Reset="@this.OnResetClicked"
                                 TestRunning="@this._testRunning"/>
            </RadzenStack>
        </RadzenRow>
    </RadzenSplitterPane>
    <RadzenSplitterPane Size="80%" Collapsible="false">
        <RadzenSplitter Orientation="Orientation.Vertical" style=" border: 1px solid rgba(0,0,0,.08);">
            <RadzenSplitterPane Size="75%" Collapsible="false">
                <RadzenTabs>
                    <Tabs>
                        <TuningDataView H1Data="@this._h1Data"
                                        H2Data="@this._h2Data"
                                        H3Data="@this._h3Data"
                                        HeaterStates="@this._heaterStates"
                                        HeaterTemperatures="@this._heaterTemperatures"/>
                        <TuningResultsView Results="@this._results" />
                    </Tabs>
                </RadzenTabs>

            </RadzenSplitterPane>
            <RadzenSplitterPane Size="25%"
                                Resizable="true"
                                Collapsed="@this._eventPaneCollapsed" >
                <RadzenSplitter>
                    <RadzenSplitterPane>
                        <EventConsole @ref="@this._eventConsole"
                                      LogTitle="AutoTune Log"/>
                    </RadzenSplitterPane>
                </RadzenSplitter>
            </RadzenSplitterPane>
        </RadzenSplitter>
    </RadzenSplitterPane>
</RadzenSplitter>

@code {
    private EventConsole _eventConsole=new EventConsole();
    private HubConnection? _hubConnection;
    bool _runtimePaneCollapsed=false;
    bool _controlPaneCollapsed=false;
    bool _eventPaneCollapsed=false;
    TuningSerialData _data=new TuningSerialData();
    StationSerialData _stationData=new StationSerialData();
    private bool Connected=>this._hubConnection?.State==HubConnectionState.Connected;
    private Timer? _timer;
    private int count = 0;
    private StationHeaterMode _mode = StationHeaterMode.HeatingMode;
    private bool _testRunning = false;
    private bool _usbConnected = false;
    private int _tempSetPoint = 0;
    private TimeSpan _logInterval = TimeSpan.FromSeconds(1);
    private DateTime _lastLogTime = DateTime.Now;
    private int _elapsedSeconds = 0;
    private List<double> _heaterTemperatures =[0,0,0];
    private List<bool> _heaterStates = [false, false, false];
    
    List<HeaterTuneResult> _results = [
        new HeaterTuneResult(){HeaterNumber = 1,kp=1,ki=1,kd=1},
        new HeaterTuneResult(){HeaterNumber = 2,kp=1,ki=1,kd=1},
        new HeaterTuneResult(){HeaterNumber = 3,kp=1,ki=1,kd=1}];
        
    List<TemperatureData> _h1Data = new List<TemperatureData>();
    List<TemperatureData> _h2Data = new List<TemperatureData>();
    List<TemperatureData> _h3Data = new List<TemperatureData>();
    
    protected override async Task OnInitializedAsync() {
        /*var hubAddress=Environment.GetEnvironmentVariable("StationHub");
        string addr=string.IsNullOrEmpty(hubAddress) ? HubConstants.HubAddress:hubAddress;
        this._hubConnection = new HubConnectionBuilder()
            .WithUrl(addr)
            .Build();*/
        this._hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5066/hubs/station")
            .Build();
        this._hubConnection.On<TuningSerialData>(HubConstants.Events.OnTuningData,this.OnSerialTuningDataReceived);
        this._hubConnection.On<StationSerialData>(HubConstants.Events.OnStationData,this.OnSerialDataReceived);
        this._hubConnection.On<int>(HubConstants.Events.OnSwTuneNotify,this.OnNotifyHeaterMode);
        this._hubConnection.On<HeaterTuneResult>(HubConstants.Events.OnNotifyHeaterTuningStatus,this.OnHeaterTuningStatus);
        this._hubConnection.On<bool,string>(HubConstants.Events.OnTuningResultsSavedDatabase,this.OnTuningResultsSavedHandler);
    }
    
    private async Task StartConnection() {
        if (!this.Connected) {
            try {
                if (this._hubConnection == null) {
                    this._eventConsole.Log("Error: HubConnection is null",AlertStyle.Danger);
                    return;
                }
                await this._hubConnection?.StartAsync();
                if (this.Connected) {
                    this._eventConsole.Log("Hub Connection Established",AlertStyle.Success);
                    this.Notify("Connected Established","Connected to Station Service",NotificationSeverity.Success);
                } else {
                    this._eventConsole.Log("Hub Connection Failed",AlertStyle.Danger);
                    this.Notify("Connected Failed","Failed to connect to Station Service",NotificationSeverity.Error,30000);
                }
            }  catch(Exception e) {
                string error = e.Message;
                if (e.InnerException != null) {
                    error+="\n"+e.InnerException.Message;
                }
                this._logger.LogError("Hub Connection Failed, Exception: \n {Error}", error);
                this._eventConsole.Log("Hub Connection Failed",AlertStyle.Danger);
                this.Notify("Connected Failed",$"Failed to connect to Station Service. Exception thrown:\n{error}",
                    NotificationSeverity.Error,30000);
            }
        }
    }
    #region ButtonHandlers
    private Task StartHandler(StationCommand command) {
        if (this.Connected) {
            if (command == StationCommand.StartTune) {
                this._h1Data.Clear();
                this._h2Data.Clear();
                this._h3Data.Clear();
            }
            this._eventConsole.Log("Sending start tuning command..");
            return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand,command);
        }
        this.NotifyNotConnected();
        return Task.CompletedTask;
    }
    private Task SaveResultsHandler() {
        if (this.Connected) {
            this._eventConsole.Log("Saving Results..");
            return this._hubConnection.SendAsync(HubConstants.Methods.SaveTuningResults, this._results);
        }
        this.NotifyNotConnected();
        return Task.CompletedTask;
    }
    
    private Task ToggleTemperatureHandler() {
        if(this.Connected){
            return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand,StationCommand.ToggleHeat);
        }

        this.NotifyNotConnected();
        return Task.CompletedTask;
    }
    
    private Task CancelHandler() {
        if (this.Connected) {
            this._eventConsole.Log("Sending start tuning command..");
            return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand,StationCommand.CancelTuning);
        }
        this.NotifyNotConnected();
        return Task.CompletedTask;
    }
    
    private Task ModeSwHandler(StationCommand command) {
        if (this.Connected) {
            return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand, command);
        }
        this.NotifyNotConnected();
        return Task.CompletedTask;
    }
    
    private Task OnConnectClicked() {
        if (this.Connected) {
            this._eventConsole.Log("Disconnect Clicked",AlertStyle.Warning);
            this.StationStatusService.StationState = StationState.Offline;
            return this._hubConnection.StopAsync();
        } else {
            this.StationStatusService.StationState = StationState.Idle;
            this._eventConsole.Log("Connect Clicked",AlertStyle.Success);
            return this.StartConnection();
        }
    }
    
    private Task OnResetClicked() {
        if (this.Connected) {
            this._eventConsole.Log("Reset Clicked",AlertStyle.Warning);
            this.StationStatusService.StationState = StationState.Idle;
            this._testRunning = false;
            return this._hubConnection.SendAsync(HubConstants.Methods.SendCommand, StationCommand.Reset);
        }
        this.NotifyNotConnected();
        return Task.CompletedTask;
    }
    
    private Task OnUsbConnectClicked() {
        if (this.Connected) {
            if (this._usbConnected) {
                this._eventConsole.Log("Usb Disconnect Clicked",AlertStyle.Warning);
                return this._hubConnection.InvokeAsync(HubConstants.Methods.ConnectUsb);
            } else {
                this._eventConsole.Log("Usb Connect Clicked",AlertStyle.Info);
                return this._hubConnection.InvokeAsync(HubConstants.Methods.ConnectUsb);
            }
        }
        this.NotifyNotConnected();
        return Task.CompletedTask;
    }
    
    #endregion
    
    #region UiNootification
    private void Notify(string summary,string message,NotificationSeverity severity=NotificationSeverity.Info,int duration=5000) {
        var notification=new NotificationMessage { 
            Severity = severity, 
            Summary = summary, 
            Detail = message, 
            Duration = 10000 };
        this.NotificationService.Notify(notification);
    }
    
    private void NotifyNotConnected() {
        var notification=new NotificationMessage {
            Severity = NotificationSeverity.Error, 
            Summary = "Station Service Not Connected", 
            Detail = "Cannot Send Command", 
            Duration = 10000 };
        this.NotificationService.Notify(notification);
    }
    #endregion

    #region HubHandlers
    
    private Task OnHeaterTuningStatus(HeaterTuneResult result) {
        this._results[result.HeaterNumber-1]=result;
        return InvokeAsync(StateHasChanged);
    }

    private Task OnNotifyHeaterMode(int mode) {
        this._eventConsole.Log($"Heater Mode Changed to {mode}");
        this._mode=(StationHeaterMode)mode;
        return Task.CompletedTask;
    }

    private Task OnSerialTuningDataReceived(TuningSerialData data) {
        this._data = data;
        this._heaterTemperatures = data.Temperatures;
        this._heaterStates = data.HeaterStates;
        this._h1Data.Add(new TemperatureData { TimeSecs = data.ElapsedSeconds, TempC = data.Temperatures[0] });
        this._h2Data.Add(new TemperatureData { TimeSecs = data.ElapsedSeconds, TempC = data.Temperatures[1] });
        this._h3Data.Add(new TemperatureData { TimeSecs = data.ElapsedSeconds, TempC = data.Temperatures[2] });
        return InvokeAsync(StateHasChanged);
    }
    
    private Task OnSerialDataReceived(StationSerialData data) {
        this._stationData = data;
        this._testRunning = data.Running;
        this._heaterStates=data.HeaterStates;
        this._heaterTemperatures = data.Temperatures;
        if(this._tempSetPoint==0 && data.TemperatureSetPoint!=0){
            //start
            this._h1Data.Clear();
            this._h2Data.Clear();
            this._h3Data.Clear();
            this._elapsedSeconds = 0;
            this._lastLogTime=DateTime.Now;
            this._h1Data.Add(new TemperatureData { TimeSecs = this._elapsedSeconds, TempC = data.Temperatures[0] });
            this._h2Data.Add(new TemperatureData { TimeSecs = this._elapsedSeconds, TempC = data.Temperatures[1] });
            this._h3Data.Add(new TemperatureData { TimeSecs = this._elapsedSeconds, TempC = data.Temperatures[2] });
        }else if(this._tempSetPoint==0 && data.TemperatureSetPoint==0){
            //idle
        }else if(this._tempSetPoint!=0 && data.TemperatureSetPoint==0){
            //stop
            this._elapsedSeconds = 0;
        }else if(this._tempSetPoint!=0 && data.TemperatureSetPoint!=0){
            //running-log data
            if((DateTime.Now-this._lastLogTime)>this._logInterval) {
                this._elapsedSeconds++;
                this._lastLogTime=DateTime.Now;
                Console.WriteLine($"Elapsed Seconds: {this._elapsedSeconds}");
                this._h1Data.Add(new TemperatureData { TimeSecs = this._elapsedSeconds, TempC = data.Temperatures[0] });
                this._h2Data.Add(new TemperatureData { TimeSecs = this._elapsedSeconds, TempC = data.Temperatures[1] });
                this._h3Data.Add(new TemperatureData { TimeSecs = this._elapsedSeconds, TempC = data.Temperatures[2] });
            }
        }
        this._tempSetPoint=data.TemperatureSetPoint;
        return InvokeAsync(StateHasChanged);;
    }

    private Task OnTuningResultsSavedHandler(bool success, string message) {
        this.Notify(success ? "Results Saved Successfully" : "Failed to save results",
            message,
            success ? NotificationSeverity.Success : NotificationSeverity.Error);
        return Task.CompletedTask;
    }

    #endregion
    

    
    
    


}