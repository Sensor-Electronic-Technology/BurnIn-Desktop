@inject NavigationManager NavigationManager
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="@NavigationManager.BaseUri" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    @*<link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">*@
    <link href="_content/Radzen.Blazor/css/dark-base.css" rel="stylesheet" />
    @*<link rel="stylesheet" href="_content/Radzen.Blazor/css/software-base.css">*@
    <link href='https://fonts.googleapis.com/css?family=Orbitron' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="css/site.css" />
    <link rel="icon" href="favicon.ico" />
    <link rel="stylesheet" data-name="vs/editor/editor.main" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.1/min/vs/editor/editor.main.min.css">
    <HeadOutlet @rendermode="@InteractiveServer" />
    <title>Burn-in Station UI</title>
</head>

<body>
    <Routes @rendermode="@InteractiveServer" />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
    <script>var require = { paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.1/min/vs' } }</script>
    <script async src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.1/min/vs/loader.min.js"></script>
    <script async src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.1/min/vs/editor/editor.main.nls.js"></script>
    <script async src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.1/min/vs/editor/editor.main.js"></script>

    <script>
        var instances = {};
        function createEditor(element, id, ref, options) {
            var instance = monaco.editor.create(element, options);
            instance.onDidChangeModelContent(function () {
                ref.invokeMethodAsync('OnChangeAsync', instance.getValue());
            });
            instances[id] = instance;
            return instance;
        }

        function createDifEditor(element, id, ref, options) {
            var instance = monaco.editor.createDiffEditor(element, options);
            instance.onDidChangeModelContent(function () {
                ref.invokeMethodAsync('OnChangeAsync', instance.getValue());
            });
            instances[id] = instance;
            return instance;
        }
        
        function setModel(ref,id,value,otherValue, language){
            ref.setModel({
                original: monaco.editor.createModel(value, language,id),
                modified: monaco.editor.createModel(value, language,id)
            });
        }

        function copy(id) {
            var text = instances[id].getValue();
            navigator.clipboard.writeText(text);
        }
        
        function createModel(value, language) {
            return monaco.editor.createModel(value, language);
        }
    </script>
</body>

</html>
