@using System.Timers
@using BurnInControl.Data.StationModel
@using BurnInControl.HubDefinitions.Hubs
@using BurnInControl.Shared.ComDefinitions
@using Microsoft.AspNetCore.SignalR.Client
@using BurnInControl.Dashboard.Data
@using BurnInControl.Dashboard.Services
@using BurnInControl.Data.BurnInTests.Wafers
@using BurnInControl.Data.StationModel.Components
@using BurnInControl.Infrastructure.StationModel
@using BurnInControl.Infrastructure.TestLogs
@using MongoDB.Bson
@using BurnInControl.Shared
@inject ILogger<StationStatusView> Logger
@inject StationDataService StationDataService
@inject TestLogDataService TestLogDataService
@inject StationErrorService StationErrorService
@inject DialogService DialogService
@implements IAsyncDisposable
@attribute [StreamRendering]

<style>
    .rz-alert .rz-alert-title{
        font-size: large !important;
    }
    .rz-fieldset-content{
        padding: 0.5rem !important;
    }
    .fieldset-padding {
        --rz-fieldset-padding: 0.5rem !important;    
    }
</style>

<RadzenCard Variant="Variant.Outlined">
    <RadzenAlert Title="@this._stationText"
                 Text="@this._stateText"
                 Shade="@this._alertShade"
                 AlertStyle="@this.GetAlertStyle()"
                 Variant="Variant.Filled"
                 Size="AlertSize.Medium"
                 AllowClose="false">
    </RadzenAlert>
    <RadzenCard>
        @if (this._data.Running) {
            <RadzenStack>
                <RadzenFieldset Text="ProbeStatus" Collapsed="false" AllowCollapse="true">
                    <RadzenRow>
                        @for (int i = 0; i < ControllerHardwareConstants.PROBE_COUNT; i++) {
                            var probe = this._probeAlerts[i].Okay;
                            var loaded = this._probeAlerts[i].Loaded;
                            int index = i;
                            <RadzenColumn Size="3">
                                <RadzenAlert Size="AlertSize.ExtraSmall"
                                             Text="@this.SetProbeText(index, probe, loaded)"
                                             AlertStyle="@this.GetProbeAlertStyle(probe, loaded)"
                                             ShowIcon="false"
                                             Shade="Shade.Default"
                                             AllowClose="false"/>
                            </RadzenColumn>
                        }
                    </RadzenRow>
                </RadzenFieldset>
                <RadzenFieldset Text="Test Status" AllowCollapse="true" Collapsed="true">
                    <RadzenStack Orientation="Orientation.Vertical"
                                 JustifyContent="JustifyContent.Center"
                                 AlignItems="AlignItems.Center">
                        <RadzenButton Text="Show Live View" Click="ShowLiveViewHandler"/>
                        <RadzenFieldset Text="Running Test">
                            @if (this._pocketWaferSetups.Any()) {
                                <RadzenStack Orientation="Orientation.Horizontal">
                                    @foreach (var keyValue in this._pocketWaferSetups) {
                                        <RadzenFieldset Text="@keyValue.Key" Style="margin: 10px auto;">
                                            <RadzenText Text="@keyValue.Value.WaferId" TextStyle="TextStyle.Body1"/>
                                        </RadzenFieldset>
                                    }
                                </RadzenStack>
                            }
                        </RadzenFieldset>
                        <RadzenFieldset Text="Time">
                            <RadzenStack Orientation="Orientation.Horizontal">
                                <RuntimeDisplayDashboard DisplayText="Runtime"
                                                         RuntimeSecs="@(this._data.RuntimeSeconds)"
                                                         TextStyle="TextStyle.Body1"
                                                         ShowMins="false"
                                                         Width="80px"/>
                                <RuntimeDisplayDashboard DisplayText="Elapsed"
                                                         RuntimeSecs="@(this._data.ElapsedSeconds)"
                                                         TextStyle="TextStyle.Body1"
                                                         LabelFontSize="12px"
                                                         Width="fit-content"/>
                                <RuntimeDisplayDashboard DisplayText="Remaining"
                                                         RuntimeSecs="@(this._data.RuntimeSeconds - this._data.ElapsedSeconds)"
                                                         TextStyle="TextStyle.Body1"
                                                         LabelFontSize="12px"
                                                         Width="fit-content"/>
                            </RadzenStack>
                        </RadzenFieldset>
                        <RadzenFieldset Text="Test Config">
                            <RadzenStack Orientation="Orientation.Horizontal">
                                <GenericDisplay DisplayLabel="Set Current"
                                                DisplayValue="@this._data.CurrentSetPoint.ToString()"
                                                DisplayTextStyle="TextStyle.H6"
                                                Width="120px"/>
                                <GenericDisplay DisplayLabel="Set Temp"
                                                DisplayValue="@this._data.TemperatureSetPoint.ToString()"
                                                DisplayTextStyle="TextStyle.H6"
                                                Width="120px"/>
                            </RadzenStack>
                        </RadzenFieldset>

                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        } else {
            <RadzenFieldset Text="Last Test">
                @if (this._pocketWaferSetups.Any()) {
                    <RadzenStack Orientation="Orientation.Vertical">
                        <RadzenButton Text="View Result" Click="ViewTestResultHandler"/>
                        <RadzenStack Orientation="Orientation.Horizontal">
                            @foreach (var keyValue in this._pocketWaferSetups) {
                                <RadzenFieldset Text="@keyValue.Key" Style="margin: 10px auto;">
                                    <RadzenText Text="@keyValue.Value.WaferId" TextStyle="TextStyle.H6"/>
                                </RadzenFieldset>
                            }
                        </RadzenStack>
                    </RadzenStack>
                }
            </RadzenFieldset>
        }
    </RadzenCard>
</RadzenCard>

@code {
    [Parameter] public string? StationId {get;set;}="S99";
    [Parameter] public string? StationIpAddress {get;set;}
    [Parameter] public string? AlternativeIpAddress {get;set;}

    private Shade _alertShade;
    private AlertStyle _savedStyle;
    private bool _alertState;
    private bool _alertLatched;
    private ProbeAlert[] _probeAlerts = [new(0), new(1), new(2), new(3), new(4), new(5)];
    
    private HubConnection? _hubConnection;
    private PocketWaferSetup? _waferSetup; 
    private bool _isConnected=>this._hubConnection?.State==HubConnectionState.Connected;
    private StationState _state=StationState.Offline;
    private string _stationText = "StationId: S00";
    private string _stateText = nameof(StationState.Offline);
    private AlertStyle _alertStyle=AlertStyle.Danger;
    private StationSerialData _data = new StationSerialData();
    private Dictionary<string,PocketWaferSetup> _pocketWaferSetups = [];
    private ObjectId _testLogId;
    private System.Timers.Timer _alertTimer;
    
    private bool _testRunning = false;
    private bool _testPaused = false;
    private bool _heating = false;
    private bool _alertAck = false;
    private bool _firstRun = true;
    private bool _ipOkay = false;

    private string _runTimeDisplay="";
    private string _remainingTime;

    protected override async Task OnInitializedAsync() {
        this.StationErrorService.OnErrorResolved += this.OnErrorResolvedHandler;
        this._stationText = $"StationId: {this.StationId ?? "S00"}";
        this._alertTimer = new Timer();
        this._alertTimer.Interval = 1000;
        this._alertTimer.AutoReset = true;
        this._alertTimer.Elapsed += this.AlertTimerHandler;
        
        if (!string.IsNullOrWhiteSpace(this.StationIpAddress)) {
            if (PingService.Ping(this.StationIpAddress)) {
                this._ipOkay = true;
            }else if(!string.IsNullOrWhiteSpace(this.AlternativeIpAddress)) {
                if (PingService.Ping(this.AlternativeIpAddress)) {
                    this.StationIpAddress=this.AlternativeIpAddress;
                    this._ipOkay = true;
                } else {
                    this._ipOkay = false;
                }
            } else {
                this._ipOkay = false;
            }

            if (this._ipOkay) {
                this._hubConnection = new HubConnectionBuilder()
                    .WithUrl($"http://{this.StationIpAddress}:5000/hubs/station")
                    .WithAutomaticReconnect()
                    .Build();
                this._hubConnection.On<StationSerialData>(StationHubConstants.Events.OnStationData, this.OnSerialComReceived);
                try {
                    await this._hubConnection.StartAsync();
                    if (!string.IsNullOrWhiteSpace(this.StationId)) {
                    
                        var testLogResult= await this.TestLogDataService.GetLastTestLog(this.StationId);
                        this._pocketWaferSetups=testLogResult.Setup;
                        this._testLogId = testLogResult.Id;
                    }
                } catch (Exception e) {
                    this.Logger.LogError("Failed to connect to station hub: StationId{Id},Station Ip:{Ip} \n Error:{0}",
                        this.StationId ?? "S00",this.StationIpAddress ?? "0.0.0.0",e.Message);
                }
            } else {
                this.StationStateChangedHandler(StationState.Offline);
            }

        }
    }

    private void OnErrorResolvedHandler(string stationId,List<string> resolvedErrors) {
        if(this.StationId==stationId) {
            foreach(var error in resolvedErrors) {
                var probeAlert = this._probeAlerts.FirstOrDefault(e => e.ProbeId == error);
                if (probeAlert != null) {
                    probeAlert.Acknowledged = true;
                }
            }
            this._alertStyle = this._savedStyle;
            this._alertShade = Shade.Default;
            this._alertTimer.Stop();
            this.StationStateChangedHandler(this._state);
        }
    }

    private string SetProbeText(int index,bool okay,bool loaded) {
        if (loaded) {
            return okay ? $"P{index+1}:Okay" : $"P{index+1}:Alarm";
        } else {
            return $"P{index+1}:Empty";
        }
    }

    private AlertStyle GetProbeAlertStyle(bool okay,bool loaded) {
        if(loaded) {
            return okay ? AlertStyle.Success : AlertStyle.Danger;
        } else {
            return AlertStyle.Info;
        }
    }

    private AlertStyle GetAlertStyle() {
        if (this._probeAlerts.Any(e=>!e.Okay && !e.Acknowledged)) {
            return this._alertState ? AlertStyle.Danger : AlertStyle.Light;
        } else {
            return this._alertStyle;
        }
    }

    private void AlertTimerHandler(Object? source, ElapsedEventArgs e) {
        this._alertState=!this._alertState;
    }

    private void StationStateChangedHandler(StationState state) {
        this._state = state;
        this._stateText = state.ToString();
        switch (state) {
            case StationState.Idle: {
                this._alertStyle = AlertStyle.Info;
                this._alertShade=Shade.Light;
                break;
            }
            case StationState.Running: {
                this._alertStyle = AlertStyle.Success;
                this._alertShade=Shade.Default;
                break;
            }
            case StationState.Paused: {
                this._alertStyle = AlertStyle.Warning;
                this._alertShade=Shade.Default;
                break;
            }
            case StationState.Offline: {
                this._alertStyle = AlertStyle.Dark;
                this._alertShade=Shade.Default;
                break;
            }
            case StationState.Heating: {
                this._alertStyle = AlertStyle.Danger;
                this._alertShade=Shade.Default;
                break;
            }    
            case StationState.Tuning: {
                this._alertStyle = AlertStyle.Secondary;
                this._alertShade=Shade.Default;
                break;
            }
            case StationState.TuningMode: {
                this._alertStyle = AlertStyle.Base;
                this._alertShade=Shade.Default;
                break;
            }
        }
        InvokeAsync(StateHasChanged);
    }
    
    private async Task OnSerialComReceived(StationSerialData data) {
        this._data = data;
        if (this._firstRun) {
            this._firstRun = false;
            this._testRunning = this._data.Running;
            this._testPaused = this._data.Paused;
            if (this._data.Running) {
                if (!string.IsNullOrWhiteSpace(this.StationId)) {
                    var testLogResult= await this.TestLogDataService.GetLastTestLog(this.StationId);
                    this._pocketWaferSetups=testLogResult.Setup;
                    this._testLogId = testLogResult.Id;
                }
                this.StationStateChangedHandler(data.Paused ? StationState.Paused:StationState.Running);
            } else {
                if (data.HeaterStates.Any(e=>e==true) && !this._testRunning) {
                    this.StationStateChangedHandler(StationState.Heating);
                } else {
                    this.StationStateChangedHandler(StationState.Idle);
                }
            }
            return;
        }

        if (this._testRunning != data.Running) {
            if (!string.IsNullOrWhiteSpace(this.StationId)) {
                var testLogResult= await this.TestLogDataService.GetLastTestLog(this.StationId);
                this._pocketWaferSetups=testLogResult.Setup;
                this._testLogId = testLogResult.Id;
            }
            this.StationStateChangedHandler(data.Running ? (data.Paused) ? StationState.Paused:StationState.Running : StationState.Idle);
        }
        this._testRunning = data.Running;
        this._testPaused = data.Paused;
        if (!this._testRunning) {
            if (data.TemperatureSetPoint!=0) {
                this.StationStateChangedHandler(StationState.Heating);
            } else {
                this.StationStateChangedHandler(StationState.Idle);
            }
        }
        this.ParseProbeErrors(data);
        await InvokeAsync(StateHasChanged);
    }

    private void ParseProbeErrors(StationSerialData data) {
        if (data.Running) {
            if (data.ProbeRunTimeOkay.Any(e => e == false)) {
                bool sendAlert = false;
                for(int i=0;i<ControllerHardwareConstants.PROBE_COUNT;i++) {
                    var probeValue = i % 2==0 ? i/2+1: (i-1)/2+1;
                    if (this._pocketWaferSetups[StationPocket.FromValue(probeValue).Name].Loaded) {
                        bool loaded = false;
                        if (i % 2 == 0) {
                            loaded = !string.IsNullOrWhiteSpace(this._pocketWaferSetups[StationPocket.FromValue(probeValue).Name].Probe1Pad);
                        } else {
                            loaded = !string.IsNullOrWhiteSpace(this._pocketWaferSetups[StationPocket.FromValue(probeValue).Name].Probe2Pad);
                        }
                        this._probeAlerts[i].Loaded = loaded;
                        if (loaded) {
                            if(!data.ProbeRunTimeOkay[i]) {
                                if (!this._probeAlerts[i].Latched) {
                                    this._probeAlerts[i].LastAlert = DateTime.Now;
                                    this._probeAlerts[i].Latched = true;
                                } else {
                                    if ((DateTime.Now - this._probeAlerts[i].LastAlert).TotalSeconds >= 5) {
                                        if(this._probeAlerts[i].Okay) {
                                            this._probeAlerts[i].Okay = false;
                                            this._probeAlerts[i].Acknowledged = false;
                                            sendAlert = true;
                                        }
                                    }
                                }
                            } else {
                                this._probeAlerts[i].Latched = false;
                                if(!this._probeAlerts[i].Okay) {
                                    this._probeAlerts[i].Okay = true;
                                    this._probeAlerts[i].Acknowledged = false;
                                    sendAlert = true;
                                }
                            }
                        } else {
                            this._probeAlerts[i].Okay = true;
                            this._probeAlerts[i].Acknowledged = false;
                            this._alertLatched = false;
                            this._probeAlerts[i].Loaded = false;
                        }

                    } else {
                        this._probeAlerts[i].Okay = true;
                        this._probeAlerts[i].Acknowledged = false;
                        this._alertLatched = false;
                        this._probeAlerts[i].Loaded = false;
                    }
                }
                if (sendAlert) {
                    if (this._probeAlerts.Any(e => e.Okay==false)) {
                        if (!this._alertTimer.Enabled) {
                            this._alertTimer.Start();
                        }
                        var alerts=this._probeAlerts
                            .Where(e => e is { Okay: false, Acknowledged: false })
                            .Select(e=>e.ProbeId).ToList();
                        if (alerts.Count > 0) {
                            this.StationErrorService.NotifyError(this.StationId ?? "S00",alerts);
                        }
                    } else {
                        this._alertTimer.Stop();
                        this.StationErrorService.NotifyErrorResolved(this.StationId ?? "S00");
                    }
                }
            } else {
                foreach(var probeAlert in this._probeAlerts) {
                    probeAlert.Okay = true;
                    probeAlert.Acknowledged = false;
                    probeAlert.Loaded = true;
                }
            }
        }
    }
    
    public async ValueTask DisposeAsync() {
        if (this._hubConnection != null) {
            await this._hubConnection.DisposeAsync();
        }
        this.StationErrorService.OnErrorResolved -= this.OnErrorResolvedHandler;
    }

    private async Task ViewTestResultHandler() {
        if (this._testLogId != ObjectId.Empty) {
            var waferTestResults=await this.TestLogDataService.GetWaferTestResultsDto(this._testLogId);
            if (waferTestResults.Any()==true) {
                this.DialogService.Open<WaferTestResultsView>("Wafer Test Result", new Dictionary<string, object> {
                    {"WaferTestResults", waferTestResults},
                    {"DialogView",true}
                },new DialogOptions { Width = "fit-content", Height = "fit-content" , 
                    ShowClose = true,CloseDialogOnOverlayClick = true,
                    CloseDialogOnEsc = true});
            }
        }
    }

    private async Task ShowLiveViewHandler() {
        this.DialogService.Open<LiveView>($"Station <strong>{this.StationId}</strong> Live View", new Dictionary<string, object> {
            {"Connection", this._hubConnection}
        },new DialogOptions { Width = "fit-content",
            Height = "fit-content" , 
            ShowClose = true,
            CloseDialogOnOverlayClick = true,
            CloseDialogOnEsc = true});
    }

}