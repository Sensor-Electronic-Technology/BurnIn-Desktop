@using BurnInControl.Data.BurnInTests
@using BurnInControl.Data.BurnInTests.DataTransfer
@using BurnInControl.Infrastructure.StationModel
@using BurnInControl.Infrastructure.TestLogs
@using BurnInControl.Dashboard.Data
@inject TestLogDataService TestLogDataService
@inject StationDataService StationDataService

<RadzenStack Orientation="Orientation.Vertical">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenFieldset Text="Select Station">
            <RadzenDropDown TValue="string" Data="@this._stations"
                            Value="@this._selectedStation"
                            ValueChanged="SelectedStationChanged"/>
        </RadzenFieldset>
        <RadzenFieldset Text="Selection Data Option">
            <RadzenSelectBar TValue="int"
                             Size="ButtonSize.Small"
                             @bind-Value="@this._selectedOption"
                             Data="@this._selectionOptions"
                             ValueProperty="Value"
                             TextProperty="Name"/>
        </RadzenFieldset>
    </RadzenStack>
    @if (this._stationTestLogs == null) {
        <RadzenText Text="Select a station from the dropdown to view logs." TextStyle="TextStyle.H6"/>
    } else {
        <RadzenDataGrid TItem="BurnInTestLogDto"
                        Data="@this._stationTestLogs"
                        AllowGrouping="true"
                        AllowPaging="true" PageSize="10"
                        AllowFiltering="true"
                        AllowSorting="true"
                        AllowRowSelectOnRowClick="true"
                        SelectionMode="DataGridSelectionMode.Single"
                        ValueChanged="@this.SelectedTestLogChangedHandler"
                        Value="@this._selectedTestLogs">
            <Columns>
                <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.StartTime)" Title="Start"/>
                <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.StopTime)" Title="Stop"/>
                <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.RunTime)" Title="Run Time"/>
                <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.SetCurrent)" Title="Set Current"/>
                <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.SetTemperature)" Title="Set Temp."/>
                <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.ElapsedTime)" Title="Elapsed"/>
                <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.LeftPocket)" Title="WaferId(Left)"/>
                <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.MiddlePocket)" Title="WaferId(Middle)"/>
                <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.RightPocket)" Title="WaferId(Right)"/>
            </Columns>
        </RadzenDataGrid>
    }
    @switch (this._selectedOption) {
        case 0:
            <WaferTestResultsView WaferTestResults="@this._waferTestResults"/>
            break;
        case 1:
            <RadzenText Text="Raw Log View" TextStyle="TextStyle.H6"/>
            @*<RawLogView TestLogs="@this._selectedTestLogs"/>*@
            break;
    }
    @*<WaferTestResultsView WaferTestResults="@this._waferTestResults"/>*@
</RadzenStack>

@code {
    private IEnumerable<string>? _stations;
    private IEnumerable<BurnInTestLogDto>? _stationTestLogs;
    private IList<BurnInTestLogDto> _selectedTestLogs=[];
    private IEnumerable<WaferTestResultDto>? _waferTestResults;
    private List<SelectOption> _selectionOptions = [
        new SelectOption(){Name="Wafers Test Result", Value=0}, 
        new SelectOption(){Name="Raw Log", Value=1}
    ];
    private int _selectedOption;
    private string _selectedStation = string.Empty;

    protected override async Task OnInitializedAsync() {
        this._stations = await this.StationDataService.GetStationList();
    }

    private async Task SelectedStationChanged(string station) {
        this._selectedStation = station;
        this._stationTestLogs=await this.TestLogDataService.GetRecentStationTests(station);
    }

    private async Task SelectedTestLogChangedHandler(IList<BurnInTestLogDto> selectedTestLogs) {
        this._selectedTestLogs = selectedTestLogs;
        if (selectedTestLogs?.Any() == true) {
            this._waferTestResults = await this.TestLogDataService.GetWaferTestResultsDto(selectedTestLogs[0]._id);
            await InvokeAsync(StateHasChanged);
        }
    }
}