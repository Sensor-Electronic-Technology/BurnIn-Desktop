@using BurnInControl.Data.BurnInTests
@using BurnInControl.Data.BurnInTests.DataTransfer
@using BurnInControl.Infrastructure.StationModel
@using BurnInControl.Infrastructure.TestLogs
@using BurnInControl.Dashboard.Data
@using BurnInControl.Shared
@inject TestLogDataService TestLogDataService
@inject StationDataService StationDataService

<style>
    .rz-panel-titlebar {
        flex-direction: row-reverse !important;
        justify-content:left !important;
    }
</style>

<RadzenStack Orientation="Orientation.Vertical">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenFieldset Text="Enter Number of Days">
            <RadzenNumeric TValue="int"
                           Value="@this._recentDays"
                           Min="1" Max="20" 
                           ValueChanged="@RecentDaysChangedHandler"/>
        </RadzenFieldset>
        <RadzenFieldset Text="Select Data Type">
            <RadzenSelectBar TValue="int"
                             Size="ButtonSize.Small"
                             Value="@this._selectedOption"
                             ValueChanged="@SelectionOptionChanged"
                             Data="@this._selectionOptions"
                             ValueProperty="Value"
                             TextProperty="Name"/>
        </RadzenFieldset>
        <RadzenFieldset Text="Select Data Point Density" Visible="@(this._selectedOption==1)"> 
            <RadzenSelectBar TValue="int"
                             Size="ButtonSize.Small"
                             Value="@this._dataPointCountOption"
                             Data="@this._dataPointCountOptions"
                             ValueChanged="DataPointDensityChangedHandler"
                             ValueProperty="N"
                             TextProperty="Name"/>
        </RadzenFieldset>
    </RadzenStack>
    @if (this._stationTestLogs == null) {
        <RadzenText Text="Select a station from the dropdown to view logs." TextStyle="TextStyle.H6"/>
    } else {
        <RadzenPanel AllowCollapse="true">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.H5">
                    <RadzenIcon Icon="assessment" class="rz-me-1" /><b>@($"{this._selectedStation} Logs")</b>
                </RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenCard class="rz-mt-4" Variant="Variant.Outlined">
                    <RadzenDataGrid TItem="BurnInTestLogDto"
                                    Data="@this._stationTestLogs"
                                    AllowGrouping="true"
                                    AllowPaging="true"
                                    PageSize="@this._pageSizeOption"
                                    AllowFiltering="true"
                                    AllowSorting="true"
                                    AllowRowSelectOnRowClick="true"
                                    SelectionMode="DataGridSelectionMode.Single"
                                    ValueChanged="@this.SelectedTestLogChangedHandler"
                                    Render="@this.OnRender"
                                    CellRender="@this.CellRender"
                                    Density="@this._density"
                                    Value="@this._selectedTestLogs">
                        <HeaderTemplate>
                            <RadzenStack Orientation="Orientation.Horizontal" Style="padding: 0.5rem;">
                                <RadzenFieldset Text="Page Size">
                                    <RadzenSelectBar TValue="int"
                                                     Size="ButtonSize.Small"
                                                     @bind-Value="@this._pageSizeOption"
                                                     Data="@this._pageSizeOptions"
                                                     ValueProperty="N"
                                                     TextProperty="Name"/>
                                </RadzenFieldset>
                                <RadzenFieldset Text="Data Density">
                                    <RadzenSelectBar @bind-Value="@_density" TextProperty="Text" ValueProperty="Value"
                                                     Data="@(Enum.GetValues(typeof(Density)).Cast<Density>().Select(t => new { Text = $"{t}", Value = t }))" Size="ButtonSize.Small" />
                                </RadzenFieldset>
                            </RadzenStack>

                        </HeaderTemplate>
                        <Columns>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.StationId)" Title="StationId"/>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.StartTime)" Title="Start"/>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.StopTime)" Title="Stop"/>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.Completed)" Title="Completed?">
                                <Template Context="data">
                                    @if (data.Completed) {
                                        <span style='color: var(--rz-text-contrast-color)'>Completed</span>
                                    } else {
                                        <span style='color: var(--rz-text-color)'>Not Completed</span>
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.RunTime)" Title="Run Time">
                                <Template>
                                    <span>@this.GetRunTimeStr(context.RunTime)</span>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.SetCurrent)" Title="Set Current"/>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.SetTemperature)" Title="Set Temp."/>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.LeftPocket)" Title="WaferId(Left)"/>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.MiddlePocket)" Title="WaferId(Middle)"/>
                            <RadzenDataGridColumn Property="@nameof(BurnInTestLogDto.RightPocket)" Title="WaferId(Right)"/>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenCard>
            </ChildContent>
        </RadzenPanel>
    }
    @switch (this._selectedOption) {
        case 0:
            <WaferTestResultsView WaferTestResults="@this._waferTestResults"/>
            break;
        case 1: {
            @if (this._loading) {
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenProgressBarCircular ShowValue="false" 
                                               Mode="ProgressBarMode.Indeterminate" 
                                               Size="ProgressBarCircularSize.Large">
                        <Template>Loading</Template>
                    </RadzenProgressBarCircular>
                </RadzenStack>
            } else {
                @if (this.IsDataVisible()) {
                    <RadzenTabs RenderMode="TabRenderMode.Client">
                        <Tabs>
                            <RadzenTabsItem Text="Plot">
                                <StationTestPlotView StationTestLogs="@this._stationTestLogsReadings"
                                                     Pocket1Wafer="@this._selectedTestLogs[0]?.LeftPocket"
                                                     Pocket2Wafer="@this._selectedTestLogs[0]?.MiddlePocket"
                                                     Pocket3Wafer="@this._selectedTestLogs[0]?.RightPocket"/>
                            </RadzenTabsItem>
                            <RadzenTabsItem Text="Table">
                                <StationLogView StationTestLogs="@this._stationTestLogsReadings"
                                                Pocket1Wafer="@this._selectedTestLogs[0]?.LeftPocket"
                                                Pocket2Wafer="@this._selectedTestLogs[0]?.MiddlePocket"
                                                Pocket3Wafer="@this._selectedTestLogs[0]?.RightPocket"/>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                }
            }
            break;
        }
    }
</RadzenStack>

@code {
    private IEnumerable<string>? _stations;
    private IEnumerable<BurnInTestLogDto>? _stationTestLogs;
    private IList<BurnInTestLogDto> _selectedTestLogs=[];
    private IEnumerable<WaferTestResultDto>? _waferTestResults;
    private IEnumerable<StationTestReading>? _stationTestLogsReadings;
    private int _recentDays = 5;
    
    private List<SelectOption> _selectionOptions = [
        new SelectOption(){Name="Wafers Test Result", Value=0}, 
        new SelectOption(){Name="Raw Log", Value=1}
    ];

    private List<DataPointOption> _dataPointCountOptions = [
        new DataPointOption(){Name="All", N=1},
        new DataPointOption(){Name="Every 5th", N=5},
        new DataPointOption(){Name="Every 10th", N=10},
        new DataPointOption(){Name="Every 20th", N=20},
    ];
    
    private List<PageSizeOption> _pageSizeOptions = [
        new PageSizeOption(){Name="5", N=5},
        new PageSizeOption(){Name="10", N=10},
        new PageSizeOption(){Name="20", N=20},
        new PageSizeOption(){Name="40", N=40},
    ];

    private int _dataPointCountOption=5;
    private int _pageSizeOption=5;
    private int _selectedOption;
    private string _selectedStation = string.Empty;
    bool _loading = false;
    private Density _density = Density.Compact;
    
    protected override async Task OnInitializedAsync() {
        this._dataPointCountOption = 5;
        this._recentDays = 5;
        this._stationTestLogs = await this.TestLogDataService.GetRecentDays(this._recentDays);
        this._selectedTestLogs = [];
        this._stationTestLogsReadings = [];
        this._waferTestResults = [];
        
    }
    
    private async Task RecentDaysChangedHandler(int days) {
        this._recentDays = days;
        this._stationTestLogs = await this.TestLogDataService.GetRecentDays(days);
        this._selectedTestLogs = [];
        this._stationTestLogsReadings = [];
        this._waferTestResults = [];
    }

    private bool IsDataVisible() {
        return this._selectedTestLogs?.Any() == true  && this._stationTestLogs?.Any() == true;
    }

    private async Task SelectedTestLogChangedHandler(IList<BurnInTestLogDto> selectedTestLogs) {
        this._selectedTestLogs = selectedTestLogs;
        await this.Load();
    }

    private async Task SelectionOptionChanged(int option) {
        this._selectedOption = option; 
        await this.Load();
    }
    
    private async Task DataPointDensityChangedHandler(int n) {
        this._dataPointCountOption = n;
        await this.Load();
    }

    private string GetRunTimeStr(long runtime) {
        long hours=runtime/3600;
        long minutes=(runtime/60)%60;
        long seconds=runtime%60;
        string value = "";
        if ((hours / 10) < 1 || hours==0) {
            value="0"+hours+":";
        } else {
            value=hours+":";
        }
        
        if ((minutes / 10) < 1 || minutes==0) {
            value+="0"+minutes+":";
        } else {
            value+=minutes+":";
        }
        
        if ((seconds / 10) < 1 || seconds==0) {
            value+="0"+seconds;
        } else {
            value+=seconds;
        }
        return value;
    }
    
    void CellRender(DataGridCellRenderEventArgs<BurnInTestLogDto> args) {
        if (args.Column.Property == "Completed") {
            args.Attributes.Add("style", $"background-color: {(args.Data.Completed ? "var(--rz-success)" : "var(--rz-base-background-color)")};");
        }
    }
    
    void OnRender(DataGridRenderEventArgs<BurnInTestLogDto> args) {
        if(args.FirstRender) {
            args.Grid.Groups.Add(new GroupDescriptor(){ 
                Title = "StationId", 
                Property = nameof(BurnInTestLogDto.StationId), 
                SortOrder = SortOrder.Ascending 
            });
            StateHasChanged();
        }
    }

    private async Task Load() {
        switch (this._selectedOption) {
            case 0: {
                if (this._selectedTestLogs?.Any() == true) {
                    this._waferTestResults = await this.TestLogDataService.GetWaferTestResultsDto(this._selectedTestLogs[0]._id);
                    await InvokeAsync(StateHasChanged);
                }
                break;
            }
            case 1: {
                if (this._selectedTestLogs?.Any() == true) {
                    this._loading = true;
                    await InvokeAsync(StateHasChanged);
                    this._stationTestLogsReadings = await this.TestLogDataService.GetStationTestLogReadings(this._selectedTestLogs[0]._id,this._dataPointCountOption);
                    this._loading = false;
                    await InvokeAsync(StateHasChanged);
                }
                break;
            }
        }
    }



}