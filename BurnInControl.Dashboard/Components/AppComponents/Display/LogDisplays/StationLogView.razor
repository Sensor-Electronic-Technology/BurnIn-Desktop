@using Blazor.DownloadFileFast.Interfaces
@using BurnInControl.Data.BurnInTests
@using ClosedXML.Excel
@using ClosedXML
@inject IBlazorDownloadFileService DownloadFileService

<RadzenDataGrid Data="@this.StationTestLogs"
                AllowVirtualization="true"
                Density="Density.Compact"
                Style="height:600px"
                AllowColumnResize="true"
                AllowSorting="true">
    <HeaderTemplate>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem;" Wrap="FlexWrap.Wrap">
            <RadzenButton Text="Export XLS" Icon="grid_on" ButtonStyle="ButtonStyle.Info" Click="@this.Export" />
        </RadzenStack>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.Elapsed)" Title="Elapsed"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.Temperature)" Title="Temp Sp"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.SetCurrent)" Title="Is"/>

        <RadzenDataGridColumn Property="@nameof(StationTestReading.T1)" Title="T1"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.T2)" Title="T2"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.T3)" Title="T3"/>

        <RadzenDataGridColumn Property="@nameof(StationTestReading.V1)" Title="V1"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.V2)" Title="V2"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.V3)" Title="V3"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.V4)" Title="V4"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.V5)" Title="V5"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.V6)" Title="V6"/>

        <RadzenDataGridColumn Property="@nameof(StationTestReading.I1)" Title="I1"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.I2)" Title="I2"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.I3)" Title="I3"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.I4)" Title="I4"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.I5)" Title="I5"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.I6)" Title="I6"/>

        <RadzenDataGridColumn Property="@nameof(StationTestReading.Pr1)" Title="Pr1"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.Pr2)" Title="Pr2"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.Pr3)" Title="Pr3"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.Pr4)" Title="Pr4"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.Pr5)" Title="Pr5"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.Pr6)" Title="Pr6"/>

        <RadzenDataGridColumn Property="@nameof(StationTestReading.P1Okay)" Title="P1Okay"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.P2Okay)" Title="P2Okay"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.P3Okay)" Title="P3Okay"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.P4Okay)" Title="P4Okay"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.P5Okay)" Title="P5Okay"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.P6Okay)" Title="P6Okay"/>

        <RadzenDataGridColumn Property="@nameof(StationTestReading.H1)" Title="H1"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.H2)" Title="H2"/>
        <RadzenDataGridColumn Property="@nameof(StationTestReading.H3)" Title="H3"/>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter] public IEnumerable<StationTestReading>? StationTestLogs { get; set; }
    [Parameter] public string Pocket1Wafer { get; set; }
    [Parameter] public string Pocket2Wafer { get; set; }
    [Parameter] public string Pocket3Wafer { get; set; }
    
    private async Task Export() {
        if(this.StationTestLogs?.Any()==true) {
            var wb = new XLWorkbook();
            var worksheet=wb.Worksheets.Add("Logs");
            worksheet.Cell(1, 1).Value = "Elapsed(Hrs)";
            worksheet.Cell(1,1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1,1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Range(1, 1, 2, 1).Merge();
            worksheet.Cell(1, 2).Value = "Temperature";
            worksheet.Cell(1,2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1,2).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Range(1, 2, 2, 2).Merge();
            worksheet.Cell(1, 3).Value = "SetCurrent";
            worksheet.Cell(1,3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1,3).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Range(1, 3, 2, 3).Merge();

            worksheet.Cell(1, 4).Value = $"Left Pocket,WaferId:{this.Pocket1Wafer}";
            worksheet.Cell(1,4).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1,4).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Cell(1, 4).Style.Fill.BackgroundColor = XLColor.LightBlue;
            worksheet.Range(1,4,1,12).Merge();
            worksheet.Cell(2, 4).Value = "V1";
            worksheet.Cell(2, 5).Value = "V2";
            worksheet.Cell(2, 6).Value = "I1";
            worksheet.Cell(2, 7).Value = "I2";
            worksheet.Cell(2, 8).Value = "T1";
            worksheet.Cell(2, 9).Value = "Pr1";
            worksheet.Cell(2, 10).Value = "Pr2";
            worksheet.Cell(2, 11).Value = "P1Okay";
            worksheet.Cell(2, 12).Value = "P2Okay";
            
            worksheet.Cell(1, 13).Value = $"Middle Pocket,WaferId:{this.Pocket2Wafer}";
            worksheet.Cell(1,13).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1,13).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Cell(1, 13).Style.Fill.BackgroundColor = XLColor.LightGreen;
            worksheet.Range(1,13,1,21).Merge();
            worksheet.Cell(2, 13).Value = "V3";
            worksheet.Cell(2, 14).Value = "V4";
            worksheet.Cell(2, 15).Value = "I3";
            worksheet.Cell(2, 16).Value = "I4";
            worksheet.Cell(2, 17).Value = "T2";
            worksheet.Cell(2, 18).Value = "Pr3";
            worksheet.Cell(2, 19).Value = "Pr4";
            worksheet.Cell(2, 20).Value = "P3Okay";
            worksheet.Cell(2, 21).Value = "P5Okay";
            
            
            worksheet.Cell(1, 22).Value = $"Right Pocket,WaferId:{this.Pocket3Wafer}";
            worksheet.Cell(1,22).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1,22).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Cell(1, 22).Style.Fill.BackgroundColor = XLColor.LightSalmon;
            worksheet.Range(1,22,1,30).Merge();
            worksheet.Cell(2, 22).Value = "V5";
            worksheet.Cell(2, 23).Value = "V6";
            worksheet.Cell(2, 24).Value = "I5";
            worksheet.Cell(2, 25).Value = "I6";
            worksheet.Cell(2, 26).Value = "T3";
            worksheet.Cell(2, 27).Value = "Pr5";
            worksheet.Cell(2, 28).Value = "Pr6";
            worksheet.Cell(2, 29).Value = "P5Okay";
            worksheet.Cell(2, 30).Value = "P6Okay";
            
            worksheet.Cell(1, 31).Value = "H1 State";
            worksheet.Cell(1,31).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1,31).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Range(1, 31, 2, 31).Merge();
            worksheet.Cell(1, 32).Value = "H2 State";
            worksheet.Cell(1,32).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1,32).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Range(1, 32, 2, 32).Merge();
            worksheet.Cell(1, 33).Value = "H3 State";
            worksheet.Cell(1,33).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(1,33).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            worksheet.Range(1, 33, 2, 33).Merge();
            
            int count = 3;
            foreach (var item in this.StationTestLogs) {
                worksheet.Cell(count, 1).Value = item.Elapsed;
                worksheet.Cell(count, 2).Value = item.Temperature;
                worksheet.Cell(count, 3).Value = item.SetCurrent;
                worksheet.Cell(count, 4).Value = item.V1;
                worksheet.Cell(count, 5).Value = item.V2;
                worksheet.Cell(count, 6).Value = item.I1;
                worksheet.Cell(count, 7).Value = item.I2;
                worksheet.Cell(count, 8).Value = item.T1;
                worksheet.Cell(count, 9).Value = item.Pr1;
                worksheet.Cell(count, 10).Value = item.Pr2;
                worksheet.Cell(count, 11).Value = item.P1Okay;
                worksheet.Cell(count, 12).Value = item.P2Okay;
                
                worksheet.Cell(count, 13).Value = item.V3;
                worksheet.Cell(count, 14).Value = item.V4;
                worksheet.Cell(count, 15).Value = item.I3;
                worksheet.Cell(count, 16).Value = item.I4;
                worksheet.Cell(count, 17).Value = item.T2;
                worksheet.Cell(count, 18).Value = item.Pr3;
                worksheet.Cell(count, 19).Value = item.Pr4;
                worksheet.Cell(count, 20).Value = item.P3Okay;
                worksheet.Cell(count, 21).Value = item.P4Okay;
                
                worksheet.Cell(count, 22).Value = item.V5;
                worksheet.Cell(count, 23).Value = item.V6;
                worksheet.Cell(count, 24).Value = item.I5;
                worksheet.Cell(count, 25).Value = item.I6;
                worksheet.Cell(count, 26).Value = item.T3;
                worksheet.Cell(count, 27).Value = item.Pr5;
                worksheet.Cell(count, 28).Value = item.Pr6;
                worksheet.Cell(count, 29).Value = item.P5Okay;
                worksheet.Cell(count, 30).Value = item.P6Okay;
                
                worksheet.Cell(count, 31).Value = item.H1 ? "On":"Off";
                worksheet.Cell(count, 32).Value = item.H2 ? "On":"Off";
                worksheet.Cell(count, 33).Value = item.H3 ? "On":"Off";
                count++;
            }
            
            var stream = new MemoryStream();
            wb.SaveAs(stream);
            var bytes = stream.ToArray();
            await this.DownloadFileService.DownloadFileAsync($"{this.Pocket1Wafer}-{this.Pocket2Wafer}-{this.Pocket3Wafer}.xlsx", bytes);
        }
    }
}