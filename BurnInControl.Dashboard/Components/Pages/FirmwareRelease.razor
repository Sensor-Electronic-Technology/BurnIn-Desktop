@page "/FirmwareRelease"
@using System.Text.Json
@using BurnInControl.Dashboard.Components.AppComponents
@using BurnInControl.Dashboard.Controllers
@using BurnInControl.Dashboard.Services
@using BurnInControl.Data.VersionModel
@using MongoDB.Bson;
@using MongoDB.Driver;
@using Octokit
@using Octokit.Internal
@inject NotificationService NotificationService
@inject FirmwareReleaseService FirmwareReleaseService
<PageTitle>Firmware Release</PageTitle>
<RadzenStack>
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenFieldset Text="Version">
                <RadzenMask Mask="V*.*.*"
                            CharacterPattern="[0-9]"
                            Placeholder="V0.0.0"
                            Name="SSN"
                            @bind-Value="@this.version"/>
            </RadzenFieldset>

            <RadzenFieldset Text="Name">
                <RadzenTextBox @bind-Value="@name"/>
            </RadzenFieldset>
            <RadzenFieldset Text="Message">
                <RadzenTextArea @bind-Value="@message" Style="width: 300px"/>
            </RadzenFieldset>
        </RadzenStack>
    </RadzenCard>
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Upload </RadzenText>
        <RadzenUpload Url="upload/single" Complete=@OnComplete class="w-100" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})" />
        @*<RadzenUpload Url="" Multiple="true" Change=@OnClientChange class="w-100"
                      InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})" />*@
    </RadzenCard>

    <EventConsole @ref="@console"/>
</RadzenStack>
@code {
    RadzenUpload upload;
    private EventConsole console=new EventConsole();

    private string version = "V0.0.0";
    private string name = "Firmware";
    private string message = "Release";
    
    async Task OnComplete(UploadCompleteEventArgs args) {
        try {
            var doc=JsonSerializer.Deserialize<JsonDocument>(args.RawResponse);
            string path=doc.RootElement.GetProperty("path").GetString();
            Console.WriteLine(args.JsonResponse.ToString());
            console.Log($"File: {path}");
            var result=await this.FirmwareReleaseService.CreateNewRelease(version, name, message, path);
            if (result.Success) {
                var notification=new NotificationMessage {
                    Severity = NotificationSeverity.Success,
                    Summary = "New release created",
                    Detail = $"Release {version} created",
                    Duration = 10000 };
                this.NotificationService.Notify(notification);
            } else {
                var notification=new NotificationMessage {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error Create Release",
                    Detail = result.Message,
                    Duration = 10000 };
                this.NotificationService.Notify(notification);
            }
        } catch {
            console.Log("Error parsing response");
        }
    }
}

